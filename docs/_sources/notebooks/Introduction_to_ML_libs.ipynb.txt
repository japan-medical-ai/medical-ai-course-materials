{
  "nbformat": 4,
  "nbformat_minor": 0,
  "metadata": {
    "colab": {
      "name": "Introduction to ML libs",
      "version": "0.3.2",
      "provenance": []
    },
    "kernelspec": {
      "display_name": "Python 3",
      "language": "python",
      "name": "python3"
    }
  },
  "cells": [
    {
      "metadata": {
        "id": "D-9QSHa5gkqc",
        "colab_type": "text"
      },
      "cell_type": "markdown",
      "source": [
        "[![colab-logo](https://colab.research.google.com/assets/colab-badge.svg)](https://colab.research.google.com/github/japan-medical-ai/medical-ai-course-materials/blob/master/notebooks/Introduction_to_ML_libs.ipynb)\n",
        "\n",
        "# 機械学習ライブラリの基礎\n",
        "\n",
        "ここでは，代表的な機械学習アルゴリズムの紹介とチューニングのポイントをその数学的な背景と合わせて紹介します．\n",
        "機械学習の考え方を身に着ける練習として，単回帰分析と重回帰分析のアルゴリズムを扱います．これらを学ぶことで線形代数，統計，微分についての理解が深まります．\n",
        "\n",
        "## 単回帰分析\n",
        "\n",
        "機械学習アルゴリズムの第一弾として，最も基本的な単回帰分析について紹介します．ここで微分を含む基礎的な数学とそれに対応する機械学習アルゴリズムを交互に学びながら，知識を深めていきます．\n",
        "\n",
        "単回帰分析は教師あり学習の一種です．その中でも，数値（厳密には連続値）を予測する**回帰**を取り扱う手法です．単回帰分析は，ひとつの入力変数からひとつの出力変数を予測する機械学習アルゴリズムです．\n",
        "\n",
        "### 問題設定\n",
        "\n",
        "例として家賃の予測を考えます．この場合，家賃が出力変数 $y$ となります．\n",
        "\n",
        "次に入力変数として何を採用するかを考えます．機械学習は，データをもとに学習しますが，一番最初にどのデータを使ってどの値を予測させるかは人間側で決めなければなりません．そのため，入力変数として何を採用するかといった問題は，人間側の経験に依存します．例えば，家賃の予測では，部屋の広さか，駅からの距離か，それとも犯罪発生率を入力変数として採用するかの自由度があります．例えばここでは部屋の広さを入力変数$x$として採用することとします．実際には，このように複数の候補があった際に，それらすべてを考慮できるようなモデル化を採用するのが一般的であり，それはこの次の重回帰分析以降で紹介していきます．\n",
        "\n",
        "機械学習アルゴリズムは，どの手法も大きく分けて次の3つのステップで成り立っています．\n",
        "\n",
        "- モデルを決める\n",
        "- 目的関数を決める\n",
        "- 最適なパラメータを求める\n",
        "\n",
        "### Step1. モデルを決める\n",
        "\n",
        "まず**Step1は**では**モデル**を消えます．このモデルとは出力変数$y$と入力変数$x$の関係を定式化したものです．家賃の予測値を$y$とした際に，どのように定式化すればうまく予測することができるのか．このモデル設計は現在は人手で行うのが一般的であり，機械が自動的に決めてくれるわけではありません（一方で最近のAutoMLなど，モデルも自動決定する研究が進展しています）\n",
        "\n",
        "![01.png](https://github.com/japan-medical-ai/medical-ai-course-materials/raw/master/notebooks/images/2/01.png)\n",
        "\n",
        "例えば，与えられたデータセットにおいて，家賃と部屋の広さの関係が次のようになっているとします．この場合，部屋の広さが広くなるほど，家賃が高くなっている関係がみられ，予測のために直線を書くのが妥当にみえます．\n",
        "\n",
        "![02.png](https://github.com/japan-medical-ai/medical-ai-course-materials/raw/master/notebooks/images/2/02.png)\n",
        "\n",
        "直線の式は$y=ax+b$ で表され，$a$ を傾き，$b$ を切片とよばれるパラメータです．\n",
        "\n",
        "今回，このデータセットに対して，直線を引くことが適切であると（人間側の経験で）判断したため，以下のようにモデルを決める．\n",
        "$$\n",
        "y = wx + b\n",
        "$$\n",
        "傾き $a$ の箇所が $w$ となっているが，一般的に機械学習では，傾きの箇所を**重み (weight)** $w$, 切片 $b$ の箇所を**バイアス (bias)** $b$ で記述することが多いので覚えておいてほしい．\n",
        "\n",
        "単回帰分析では，このようにモデルを直線 $y = wx + b$ と決めて，その重みとバイアスの値をデータにうまく合うように調整します．この調整される変数のことを**パラメータ**と呼びます．つまり，今回は $w$ と $b$ がパラメータです．多くの機械学習ではこのようなパラメータで特徴付けられたモデルを使い，データにあうように最適なパラメータを求めることが目標となります．先程の例ではデータとは，部屋の広さ $x$ と教師データとなる家賃 $t$ のことであり，$\\mathcal{D} = \\{x_i, t_i\\}_{i=1}^{N}$ として表す．ここで，添え字 $i$ ($i=1,2,\\ldots,N$)は$i$番目の物件という意味であり，$N$は全体の物件数のことである．この$N$を**サンプル数**という．\n",
        "\n",
        "ここで，この後の計算を楽に進めるために，**データの中心化**というテクニックを使う．これはデータの重心（全部のデータの平均）を0とした中央に配置するように変換の処理を施す．この中心化は前処理として行うことが一般的である（分散/標準偏差も1とする正規化もよく使われる．\n",
        "\n",
        "![03.png](https://github.com/japan-medical-ai/medical-ai-course-materials/raw/master/notebooks/images/2/03.png)\n",
        "\n",
        "中心化によって，求める直線のバイアス $b$ が0となり，$y_{c} = wx_{c}$ とすることができ，調整すべきパラメータを2つから1つに減らすことができる，ただし$x_c, y_c$は中心化を適用した後の値である．\n",
        "\n",
        "![04.png](https://github.com/japan-medical-ai/medical-ai-course-materials/raw/master/notebooks/images/2/04.png)\n",
        "\n",
        "データの中心化は入出力の平均をデータの全体から引くことで実現されます．つまり，\n",
        "$$\n",
        "\\begin{aligned}\n",
        "x_{c} &= x - \\bar{x} \\\\\n",
        "t_{c} &= t - \\bar{t}\n",
        "\\end{aligned}\n",
        "$$\n",
        "を行います．\n",
        "\n",
        "例えば，具体的な数値で見ると，下図のようになります．\n",
        "\n",
        "![05.png](https://github.com/japan-medical-ai/medical-ai-course-materials/raw/master/notebooks/images/2/05.png)\n",
        "\n",
        "中心化後を示す添え字の $c$ に関しては表現が冗長となるため，今後はこの添え字を省略し，データの中心化を事前に行っていることを前提とします．この時，モデルは\n",
        "$$\n",
        "y = wx\n",
        "$$\n",
        "となり，単回帰分析の目標は，データセット $\\mathcal{D} = \\{x_n, t_n\\}_{n=1}^{N}$ に基づいて，パラメータ$w$ を適切に調整することになります．\n",
        "\n",
        "### Step2. 目的関数を決める\n",
        "\n",
        "どれだけ目標を達成しているかを表す関数を**目的関数**とよびます．分野によっては評価関数ともよばれます．\n",
        "\n",
        "今回は教師データと予測値が一致することが目標であり，それを表す目的関数として教師データと予測値の二乗誤差を使います．二乗誤差が0であるとき，またその時のみt = y となり，完璧な予測を達成しているといえます，$n$ 番目の物件に対する教師データ$t_{n}$ と予測値$y_{n}$の二乗誤差は\n",
        "$$\n",
        "(t{_n} - y_{n})^{2}\n",
        "$$\n",
        "となります．これを全物件で考慮する必要があるため，最終的な目的関数は\n",
        "$$\n",
        "\\begin{aligned}\n",
        "\\mathcal{L}&=\\left( t_{1}-y_{1}\\right)^{2}+\\left( t_{2}-y_{2}\\right)^{2}+\\ldots + (t_{N}-y_{N})^{2} \\\\\n",
        "&=\\sum^{N}_{n=1}\\left( t_{n}-y_{n}\\right)^{2}\\\\\n",
        "\\end{aligned}\n",
        "$$\n",
        "となります．また，Step1で決めたモデルより，\n",
        "$$\n",
        "y_{n} = wx_{n}\n",
        "$$\n",
        "となるため，目的関数は\n",
        "$$\n",
        "\\mathcal{L}=\\sum^{N}_{n=1}\\left( t_{n}-wx_{n}\\right)^{2}\n",
        "$$\n",
        "とパラメータを含んだ形式で表現することができます．機械学習ではこのような望ましい時に値が$0$であり，望ましくない時に大きな正の値となるような関数を目的関数とします．このような関数を**損失関数**と呼び，その値を**損失**とよびます．多くの場合複数の教師データからなる学習問題では各教師データに対する損失関数の和を目的関数とし，それを最小化することで望ましい状態を達成することを目指します．$\n",
        "\n",
        "### Step3. 最適なパラメータを求める \n",
        "\n",
        "最後は目的関数を最小化するようなパラメータを求めます．ここで，ある関数を最小化する点を求める方法としては微分が使えることをすでに学んでいます．今回のような差の二乗の場合微分して「傾き0」となる点が損失が$0$となる点です．目的関数の微分求めると，次のようになります．\n",
        "$$\n",
        "\\begin{aligned}\n",
        "\\dfrac{\\partial }{\\partial w} \\mathcal{L}  &= \\dfrac{\\partial}{\\partial w} { \\sum^{N}_{n=1} ( t_{n}-wx_{n})^{2} }\\\\\n",
        "\\end{aligned}\n",
        "$$\n",
        "ここで，微分が線形性の性質を持つことを使う，特に和の微分は微分の和であることを利用し次を得ます\n",
        "$$\n",
        "\\dfrac{\\partial}{\\partial w} \\mathcal{L}=\\sum^{N}_{n=1}\\dfrac {\\partial }{\\partial w}\\left( t_{n}-wx_{n}\\right)^{2}\n",
        "$$\n",
        "ここでは微分と総和 $\\sum$ の記号が交換しています．なお微分と積分$\\int$は常に交換できるとは限りません．次に和の各項をみると\n",
        "$$\n",
        "\\dfrac {\\partial }{\\partial w}\\left( t_{n}-wx_{n}\\right)^{2}\n",
        "$$\n",
        "の部分は合成関数になっていることがわかります．$u_{n} = t_{n} - wx_{n}$ とおくと，\n",
        "$$\n",
        "\\begin{aligned}\n",
        "\\dfrac {\\partial }{\\partial w}\\left( t_{n}-wx_{n}\\right)^{2} &=  \\dfrac {\\partial }{\\partial w} f(u_{n}) \\\\ \\because f(u_{n}) &= u_{n}^{2}\\\\\n",
        "\\Rightarrow \\dfrac {\\partial }{\\partial w} f(u_{n}) &= \\dfrac {\\partial u_{n}}{\\partial w} \\dfrac{\\partial f(u_{n})}{\\partial w} \\\\\n",
        "&=-x_{n} \\times 2 \\left( t_{n}-wx_{n}\\right)  \\\\\n",
        "&= -2x_{n}( t_{n}-wx_{n} )\n",
        "\\end{aligned}\n",
        "$$\n",
        "が得られます．これより，\n",
        "$$\n",
        "\\begin{aligned}\n",
        "\\dfrac{\\partial }{\\partial w} \\mathcal{L}\n",
        "&=\\sum^{N}_{n=1}\\dfrac {\\partial }{\\partial w}\\left( t_{n}-wx_{n}\\right)^{2}\n",
        "\\\\&=-\\sum^{N}_{n=1}2x_{n}\\left( t_{n}-wx_{n}\\right)\n",
        "\\end{aligned}\n",
        "$$\n",
        "となります．この微分の値が0となるように$w$を決めていくと，\n",
        "$$\n",
        "\\begin{aligned}\n",
        "\\dfrac {\\partial }{\\partial w} \\mathcal{L} &=0\\\\\n",
        "-2\\sum^{N}_{n=1}x_{n}\\left( t_{n}-wx_{n}\\right) &=0\\\\\n",
        "-2 \\sum^{N}_{n=1}x_{n}t_{n} + 2\\sum^{n}_{n=1}wx^{2}_{n}&=0\\\\\n",
        "-2\\sum^{N}_{n=1}x_{n}t_{n}+2w\\sum^{N}_{n=1}x^{2}_{n}&=0\\\\\n",
        "w\\sum^{N}_{n=1}x^{2}_{n}&=\\sum^{n}_{n=1}x_{n}t_{n}\\\\\n",
        "\\Rightarrow w&=\\dfrac {\\displaystyle  \\sum^{N}_{n=1}x_{n}t_{n}}{\\displaystyle  \\sum^{N}_{n=1}x^{2}_{n}}\n",
        "\\end{aligned}\n",
        "$$\n",
        "となります．この求まったパラメータはデータセット $\\mathcal{D} = \\{x_n, t_n\\}_{n=1}^{N}$ のみから決定されていることが確認できます．\n",
        "\n",
        "次に例題にあげていた数値例でパラメータ $w$ を求めてみます．まずは，データの中心化を行います．最初に平均を求めます．\n",
        "$$\n",
        "\\begin{aligned}\n",
        "\\bar{x} &= \\dfrac{1}{3} (1 + 2 + 3) = 2 \\\\\n",
        "\\bar{t} &= \\dfrac{1}{3}(2 + 3.9 + 6.1) = 4\n",
        "\\end{aligned}\n",
        "$$\n",
        "そして，各変数に対して前処理として，平均を引く中心化の処理を施します．\n",
        "$$\n",
        "\\begin{aligned}\n",
        "x_{1} &= 1 - 2 = -1 \\\\\n",
        "x_{2} &= 2 -2 = 0 \\\\\n",
        "x_{3} &= 3- 2 = 1\\\\\n",
        "t_{1} &= 2 - 4 = -2\\\\\n",
        "t_{2} &= 3.9 - 4 = -0.1\\\\\n",
        "t_{3} &= 6.1 - 4 = 2.1 \n",
        "\\end{aligned}\n",
        "$$\n",
        "そして，中心化後の値を用いて，最適なパラメータ$w$を導出します．\n",
        "$$\n",
        "\\begin{aligned}\n",
        "w &= \\dfrac{\\displaystyle \\sum_{n=1}^{N}x_{n}t_{n}}{\\displaystyle  \\sum_{n=1}^{N}x_{n}^{2}} \\\\\n",
        "&= \\dfrac{x_{1}t_{1} + x_{2}t_{2} + x_{3}t_{3}}{x_{1}^{2} + x_{2}^{2} + x_{3}^{2}} \\\\\n",
        "&= \\dfrac{-1 \\times (-2) + 0 \\times 0.1 + 1 \\times 2.1}{(-1)^{2} + 0^2 + 1^2} \\\\\n",
        "&= 2.05\n",
        "\\end{aligned}\n",
        "$$\n",
        "これで単回帰分析の学習の手順が完了しました．．この求まったパラメータを使用したモデルが学習済みモデルとよばれます．\n",
        "\n",
        "このモデルを使って新しいサンプルに対する予測をしてみましょう．例えば，新しいサンプル$x_{q}=1.5$ に対する予測値は次のように求まります．\n",
        "\n",
        "$$\n",
        "\\begin{aligned}\n",
        "y_{q} - \\bar{t} &= w(x_{q}-\\bar{x}) \\\\\n",
        "\\Rightarrow y_{q} &= w(x_{q}-\\bar{x}) + \\bar{t} \\\\\n",
        "&= 2.05 \\times (1.5 - 2) + 4 \\\\\n",
        "&= 2.975\n",
        "\\end{aligned}\n",
        "$$\n",
        "\n",
        "単回帰解析は単純ですがこれで機械学習の一通りを学ぶことができます．\n",
        "\n",
        "## 重回帰分析\n",
        "\n",
        "次に，多変数の入力変数を扱う重回帰分析を扱います．この重回帰分析を学ぶことで線形代数に関する知識が深まります．\n",
        "\n",
        "重回帰分析は単回帰分析と同様に教師あり学習の一種であり，回帰を取り扱う手法です．問題設定は，ほとんど単回帰分析と同じですが，重回帰分析では入力変数の数が複数となります．つまり，複数の入力変数から出力変数を予測できるような機械学習アルゴリズムです．\n",
        "\n",
        "### 問題設定\n",
        "\n",
        "ここでは単回帰分析の場合と同様，家賃の予測を考え，家賃を出力変数$y$とします．そして，入力変数としては，前回の単回帰分析で考慮できなかった駅からの距離や犯罪発生率なども考慮していきます．例えば，部屋の広さ$x_{1}$, 駅からの距離$x_{2}$, ..., 犯罪発生率$x_{M}$ のように $M$ 個の入力変数があるとします．\n",
        "\n",
        "単回帰分析と同様，以下の3つのステップで学習してきます．\n",
        "\n",
        "- モデルを決める\n",
        "- 目的関数を決める\n",
        "- 最適なパラメータを求める\n",
        "\n",
        "### Step1. モデルを決める\n",
        "\n",
        "単回帰分析のモデルは，\n",
        "$$\n",
        "y = wx + b\n",
        "$$\n",
        "であり，$w$を重み（weight），$b$をバイアス(bias)と呼びました．重回帰分析では，この式を複数の入力変数に拡張し，\n",
        "$$\n",
        "y=w_{1}x_{1}+w_{2}x_{2}+\\ldots +w_{M}x_{M}+b\n",
        "$$\n",
        "のような線形結合の形で表します．この場合，各変数は独立に出力変数を影響を与えるというようなモデル化であり，かなり単純なモデル化といえます．実際は問題にあわせて様々なモデルを考えそれらを選択する必要があります．それらについては今後説明していきます．\n",
        "\n",
        "重回帰分析のモデルは，和の記号を使って次のように書くことができます．\n",
        "$$\n",
        "y = \\sum_{m=1}^{M} w_{m} x_{m} + b\n",
        "$$\n",
        "これをベクトルを使って表してみる．単回帰分析では，データの中心化によって，バイアス$b$を無視できように式変形を行ったが，前回はそれによって，求めるべきパラメータが$w$の１つだけになり，手計算の量が減るというメリットがあった．重回帰分析では，$b$が省略できたところで，パラメータの数が$M+1$個から$M$個に減るだけでほとんどメリットがない．そこで，入力変数で値が常に$1$であるような仮想変数$x_0 = 1$を加え，$w_0$をバイアスに対応させるようにする．\n",
        "$$\n",
        "\\begin{aligned}\n",
        "y&=w_{1}x_{1}+w_{2}x_{2}+\\ldots +w_{M}x_{M}+b\\\\\n",
        "&=w_{1}x_{1}+w_{2}x_{2}+\\ldots +w_{M}x_{M}+w_{0} x_{0}\\\\\n",
        "&=w_{0}x_{0}+w_{1}x_{1}+\\ldots +w_{M}x_{M}\\\\\n",
        "\\end{aligned}\n",
        "$$\n",
        "このようにバイアス$b$を重みに包含して書く記法は多くの登場する．そして，この式を整理していくと，\n",
        "$$\n",
        "\\begin{aligned}\n",
        "y&=w_{0}x_{0}+w_{1}x_{1}+\\ldots +w_{M}x_{M}\\\\\n",
        "&=\\begin{bmatrix}\n",
        "w_{0} & w_{1} & \\ldots  & w_{n}\n",
        "\\end{bmatrix}\\begin{bmatrix}\n",
        "x_{0} \\\\\n",
        "x_{1} \\\\\n",
        "\\vdots  \\\\\n",
        "x_{M}\n",
        "\\end{bmatrix}\\\\\n",
        "&=w^{T}x\n",
        "\\end{aligned}\n",
        "$$\n",
        "のように，ベクトルの内積で表現することができます．また，今後取り扱う際には，$x$が前に来ているほうが何かと便利なことからこれと等価な，\n",
        "$$\n",
        "\\begin{aligned}\n",
        "y&=w_{0}x_{0}+w_{1}x_{1}+\\ldots +w_{M}x_{M}\\\\\n",
        "&=\\begin{bmatrix}\n",
        "x_{0} & x_{1} & \\ldots  & x_{n}\n",
        "\\end{bmatrix}\\begin{bmatrix}\n",
        "w_{0} \\\\\n",
        "w_{1} \\\\\n",
        "\\vdots  \\\\\n",
        "w_{M}\n",
        "\\end{bmatrix}\\\\\n",
        "&=x^{T}w\n",
        "\\end{aligned}\n",
        "$$\n",
        "として表すこともできます．今後はこちらを採用していきます．\n",
        "\n",
        "### Step2. 目的関数を決める\n",
        "\n",
        "単回帰分析では，教師データ$t$と予測値$y$の二乗誤差が小さいほど，良い予測であるとし，この総和を目的関数として定めました．重回帰分析でも，予測値$y$を求めるということは同じであるため，次のような同じ目的関数を使います．\n",
        "$$\n",
        "\\begin{aligned}\n",
        "L&=\\left( t_{1}-y_{1}\\right)^{2}+\\left( t_{2}-y_{2}\\right)^{2}+\\ldots + \\left( t_{N}-y_{N}\\right)^{2}\n",
        "\\end{aligned}\n",
        "$$\n",
        "単回帰分析では，これを\n",
        "$$\n",
        "\\mathcal{L}=\\sum^{N}_{n=1} ( t_{n} - y_{n})^{2}\n",
        "$$\n",
        "のように，総和の記号を使ってまとめていましたが，ここでも線形代数で学んだテクニックを活かして，\n",
        "$$\n",
        "\\begin{aligned}\n",
        "L&=\\left( t_{1}-y_{1}\\right)^{2}+\\left( t_{2}-y_{2}\\right)^{2}+\\ldots + \\left( t_{N}-y_{N}\\right)^{2}\\\\\n",
        "&=\\begin{bmatrix} t_{1} - y_{1} & t_{2}-y_{2} & \\ldots & t_{N}-y_{N} \\end{bmatrix} \\begin{bmatrix}\n",
        "t_{1}-y_{1} \\\\\n",
        "t_{2}-y_{2} \\\\\n",
        "\\vdots \\\\\n",
        "t_{N}-y_{N}\n",
        "\\end{bmatrix}\\\\\n",
        "&=\\left( t-y\\right)^{T}\\left( t-y\\right) \n",
        "\\end{aligned}\n",
        "$$\n",
        "のようにベクトルの内積で表現できます．また，$y$に関して，Step3に入る前に式を整理しておくと，\n",
        "$$\n",
        "\\begin{aligned}\n",
        "y=\\begin{bmatrix}\n",
        "y_{1} \\\\\n",
        "y_{2} \\\\\n",
        "\\vdots \\\\\n",
        "y_{N}\n",
        "\\end{bmatrix}=\\begin{bmatrix}\n",
        "x_{1}^{T}w \\\\\n",
        "x_{2}^{T}w \\\\\n",
        "\\vdots  \\\\\n",
        "x_{N}^{T}w\n",
        "\\end{bmatrix}\n",
        "=\\begin{bmatrix}\n",
        "x_{1}^{T} \\\\\n",
        "x_{2}^{T} \\\\\n",
        "\\vdots  \\\\\n",
        "x_{N}^{T}\n",
        "\\end{bmatrix}\n",
        "w\n",
        "\\end{aligned}\n",
        "$$\n",
        "のように，書くことができます．整理すると\n",
        "$$\n",
        "\\begin{aligned}\n",
        "y&=\n",
        "\\begin{bmatrix}\n",
        "x_{10} & x_{11} & x_{12} & \\ldots  & x_{1M} \\\\\n",
        "x_{20} & x_{21} & x_{22} & \\ldots  & x_{2M} \\\\\n",
        "\\vdots  & \\vdots  & \\ddots  & \\vdots  \\\\\n",
        "x_{N0} & x_{N1} & x_{N{2}} & \\ldots  & x_{NM}\n",
        "\\end{bmatrix}\\begin{bmatrix}\n",
        "w_{1} \\\\\n",
        "w_{2} \\\\\n",
        "\\vdots  \\\\\n",
        "w_{M}\n",
        "\\end{bmatrix}\\\\\n",
        "\\Rightarrow y&=Xw\n",
        "\\end{aligned}\n",
        "$$\n",
        "と表記できます．ここでは$X$の行（横）方向が各サンプルを表しており，例えば各物件に相当します．列（縦）方向が入力変数を表しており，例えば，部屋の広さや駅からの距離などの各サンプルの値が入っています．例えば，部屋の広さ50m$^{2}$で駅からの距離600m, 犯罪発生率2%のような物件の場合，\n",
        "$$\n",
        "x^{T} = \\begin{bmatrix}\n",
        "1 & 50 & 600 & \\cdots & 0.02\n",
        "\\end{bmatrix}\n",
        "$$\n",
        "のようにデータ表現されています．先頭の $1$ はバイアスを包含する際に使用している$x_{0}$であることに注意してください．\n",
        "\n",
        "### Step3. パラメータを最適化する\n",
        "\n",
        "それでは，Step1で定めたモデルのパラメータを，Step2で定めた目的関数を最小化するように決めていきます．\n",
        "\n",
        "まずは目的関数に関して，パラメータ$w$で表現できるように式変形を行うと，\n",
        "$$\n",
        "\\begin{aligned}\n",
        "\\mathcal{L}&=\\left( t-y\\right)^{T}\\left( t-y\\right) \\\\\n",
        "&=\\left( t-Xw\\right)^{T}\\left( t-Xw\\right) \\\\\n",
        "&= \\left\\{ t^{T}-(Xw)^{T}\\right\\}\\left( t-Xw\\right) \\\\\n",
        "&=\\left( t^{T}-w^{T}X^{T}\\right)\\left( t-Xw\\right)\n",
        "\\end{aligned}\n",
        "$$\n",
        "となります．ここでは，転置の公式 $(AB)^{T} = B^{T}A^{T}$ を使っています．さらに分配法則を使って展開を進めていくと，\n",
        "$$\n",
        "\\begin{aligned}\n",
        "\\mathcal{L}&=t^{T}t-t^{T}Xw-w^{T}X^{T}t + w^{T}X^{T}Xw\\\\\n",
        "\\end{aligned}\n",
        "$$\n",
        "となります．この目的関数に対しパラメータの$w$について偏微分をとりたいが，その前にこの式はもう少し整理することができます．はじめに，\n",
        "$$\n",
        "(1)^T = 1\n",
        "$$\n",
        "というように，スカラーは転置しても同じです．上式の中で出てくる $t^{T}Xw$ はスカラーなので，\n",
        "$$\n",
        "(t^{T}Xw)^{T} = t^{T}Xw\n",
        "$$\n",
        "が成り立ちます．さらに，転置の公式 $(ABC)^T = C^TB^TA^T$ より，\n",
        "$$\n",
        "(t^{T}Xw)^T = w^{T} X^{T} t\n",
        "$$\n",
        "も成り立ちます．これより，\n",
        "$$\n",
        "(t^{T}Xw)^{T} = t^{T}Xw = w^{T} X^{T} t\n",
        "$$\n",
        "を導くことができます．これを使って目的関数を\n",
        "$$\n",
        "\\begin{aligned}\n",
        "\\mathcal{L}=t^{T}t-2t^{T}Xw + w^{T}X^{T}Xw\\\\\n",
        "\\end{aligned}\n",
        "$$\n",
        "とまとめることができます．次に$w$に関する偏微分をとるにあたって\n",
        "\n",
        "$w$に以外の定数項をまとめると，\n",
        "$$\n",
        "\\begin{aligned}\n",
        "L&=t^{T}t-2t^{T}Xw+w^{T}X^{T}Xw\\\\\n",
        "&=t^{T}t-2\\left( X^{T}t\\right)^{T} w+w^{T}X^{T}Xw \\\\\n",
        "&=c+b^{T}w+w^{T}Aw \n",
        "\\end{aligned}\n",
        "$$\n",
        "が得られます．これは，線形代数で学んだ$w$に関する二次関数となっており，$A= X^{T}X, \\ b =-2 X^{T}t, \\ c=t^{T}t$ と表せます．ここで，$b$ を転置の形式にした理由は，線形代数で学んだベクトルで微分の公式の形式に合わせるためである．\n",
        "\n",
        "それでは，目的関数を最小化することができるパラメータ$w$の求め方を考える．先述の通り，目的関数はパラメータ$w$に関して二次関数である．例えば，\n",
        "$$\n",
        "\\begin{aligned}\n",
        "w = \\begin{bmatrix}\n",
        "w_{1} \\\\ w_{2}\n",
        "\\end{bmatrix}, \n",
        "A=\\begin{bmatrix}\n",
        "1 & 2 \\\\\n",
        "3 & 4\n",
        "\\end{bmatrix},b=\\begin{bmatrix}\n",
        "1 \\\\\n",
        "2\n",
        "\\end{bmatrix},C=1\n",
        "\\end{aligned}\n",
        "$$\n",
        "のように具体的な数値例で考えてみると，\n",
        "$$\n",
        "\\begin{aligned}\n",
        "\\mathcal{L} &=\n",
        "w^{T}Aw+b^{T}w+c\\\\\n",
        "&=\n",
        "\\begin{bmatrix}\n",
        "w_{1} & w_{2}\n",
        "\\end{bmatrix}\\begin{bmatrix}\n",
        "1 & 2 \\\\\n",
        "3 & 4\n",
        "\\end{bmatrix}\\begin{bmatrix}\n",
        "w_{1} \\\\\n",
        "w_{2}\n",
        "\\end{bmatrix}\n",
        "+\\begin{bmatrix}\n",
        "1 & 2\n",
        "\\end{bmatrix}\\begin{bmatrix}\n",
        "w_{1} \\\\\n",
        "w_{2}\n",
        "\\end{bmatrix}+1\\\\\n",
        "&=\n",
        "\\begin{bmatrix}\n",
        "w_{1} & w_{2}\n",
        "\\end{bmatrix}\n",
        "\\begin{bmatrix}\n",
        "w_{1}+2w_{2} \\\\\n",
        "3w_{1}+4w_{2}\n",
        "\\end{bmatrix}+w_{1}+2w_{2}+1\\\\\n",
        "&=w_{1}\\left( w_{1}+2w_{2}\\right) +w_{1}\\left( 3w_{1}+4w_{2}\\right) +w _{1}+2w_{2}+1\\\\\n",
        "&=w^{2}_{1}+5w_{1}w_{2}+4w^{2}_{2}+w_{1}+2w_{2}+1 \\\\\n",
        "\\end{aligned}\n",
        "$$\n",
        "となり，$w_{1}, w_{2}$に関してそれぞれまとめると，\n",
        "$$\n",
        "\\begin{aligned}\n",
        "\\mathcal{L}\n",
        "&=w^{2}_{1}+\\left( 5w_{2}+1\\right) w_{1} + \n",
        "\\left( 4w^{2}_{2}+2w_{2}+1\\right) \\\\\n",
        "&=w^{2}_{2}+\\left( 5w_{1}+2\\right) w_{2}+\\left( w^{2}_{1}+w_{1}+1\\right) \\end{aligned}\n",
        "$$\n",
        "のようにそれぞれの二次関数であることがわかります．\n",
        "\n",
        "二次関数は一般に次のようなお椀型の形をとります．\n",
        "\n",
        "![06.png](https://github.com/japan-medical-ai/medical-ai-course-materials/raw/master/notebooks/images/2/06.png)\n",
        "\n",
        "これを3次元でイメージすると，下図のようになります．\n",
        "\n",
        "![08.png](https://github.com/japan-medical-ai/medical-ai-course-materials/raw/master/notebooks/images/2/08.png)\n",
        "\n",
        "そして，目的関数である二乗誤差の総和が最小となる点では各変数で微分した時の傾きが0となります．\n",
        "\n",
        "![07.png](https://github.com/japan-medical-ai/medical-ai-course-materials/raw/master/notebooks/images/2/07.png)\n",
        "\n",
        "この例では，$w_{1}$ と $w_{2}$ の２つのパラメータの場合で考えたが，これは $w_{1}$, $w_{2}$, $\\ldots$, $w_{M}$ の場合でも同様に考えることができ，目的関数が最小となる点は\n",
        "$$\n",
        "\\begin{cases}\n",
        "\\dfrac {\\partial }{\\partial w_{0}}\\mathcal{L}=0\\\\\n",
        "\\dfrac {\\partial }{\\partial w_{1}}\\mathcal{L}=0\\\\\n",
        "\\ \\ \\ \\ \\ \\vdots \\\\\n",
        "\\dfrac {\\partial }{\\partial w_{M}}\\mathcal{L}=0\\\\\n",
        "\\end{cases}\n",
        "$$\n",
        "となる点です．これをまとめると，\n",
        "\n",
        "$$\n",
        "\\begin{aligned}\n",
        "\\begin{bmatrix}\n",
        "\\dfrac {\\partial}{\\partial w_{0}} \\mathcal{L} \\\\\n",
        "\\dfrac {\\partial}{\\partial w_{1}} \\mathcal{L} \\\\\n",
        "\\vdots  \\\\\n",
        "\\dfrac {\\partial}{\\partial w_{M}} \\mathcal{L} \\\\\n",
        "\\end{bmatrix}&=\\begin{bmatrix}\n",
        "0 \\\\\n",
        "0 \\\\\n",
        "\\vdots  \\\\\n",
        "0 \\\\\n",
        "\\end{bmatrix} \\\\\n",
        "\\Rightarrow \\dfrac {\\partial}{\\partial w} \\mathcal{L} &= 0 \\\\\n",
        "\\end{aligned}\n",
        "$$\n",
        "\n",
        "のように表されます．あとは，上式を満たすように$w$を決めていけばいきます．下記の計算にはベクトルの微分をはじめとして，線形代数で学んだ内容を利用しています．必要に応じて線形代数の章を確認してください．\n",
        "\n",
        "$$\n",
        "\\begin{aligned}\n",
        "\\dfrac {\\partial }{\\partial w}\\mathcal{L}\n",
        "&= \\dfrac {\\partial }{aw}\\left( c+b^{T}w+w^{T}Aw\\right) \\\\\n",
        "&\\Rightarrow \\dfrac {\\partial }{\\partial u}\\left( c\\right) +\\dfrac {\\partial }{\\partial w}\\left( b^{T}w\\right) +\\dfrac {\\partial }{\\partial w}\\left( w^{T}Aw\\right) \n",
        "= 0\\\\\n",
        "&\\Rightarrow 0+b+\\left( A+A^{T}\\right) w =0\\\\\n",
        "&\\Rightarrow -2X^{T}t+\\left\\{ X^{T}X^{T}\\left( X^{T}X\\right)^{T}\\right\\} w\n",
        "=0\\\\\n",
        "&\\Rightarrow -2X^{T}t+2X^{T}Xw=0\\\\\n",
        "&\\Rightarrow X^{T}Xw=X^{T}t\\\\\n",
        "&\\Rightarrow \\left( X^{T}X\\right)^{-1}X^{T}X w =\\left( X^{T}X\\right)^{-1}X^{T}t \\\\\n",
        "Iw&=\\left( X^{T}X\\right)^{-1}X^{T}t \\\\\n",
        "w&=\\left( X^{T}X\\right)^{-1}X^{T}t\n",
        "\\end{aligned}\n",
        "$$\n",
        "\n",
        "ここで，$I$は単位行列です．このように，最適なパラメータは与えられているデータセット $X, t$ から求まります．また，式変形の際には\n",
        "$$\n",
        "w = \\dfrac{X^{T}t}{X^{T}X}\n",
        "$$\n",
        "のような分数が表れないように注意してください．これは行列の計算には割り算がないためです．そのため，逆行列を使って行列積のみで計算しています．\n",
        "\n",
        "また，もうひとつよくある間違いとして，\n",
        "$$\n",
        "\\begin{aligned}\n",
        "X^{T}Xw&=X^{T}t\\\\\n",
        "\\Rightarrow \\left( X^{T}\\right) ^{-1}X^{T}Xw&=\\left( X^{T}\\right) ^{-1}X^{T}t\\\\\n",
        "\\Rightarrow Xw&=t\\\\\n",
        "\\Rightarrow X^{-1}Xw&=X^{-1}t\\\\\n",
        "\\Rightarrow w&=X^{-1}t\n",
        "\\end{aligned}\n",
        "$$\n",
        "のような式変形をする場合もみられます．しかし，これは一般的には成立しません．なぜなら，線形代数の章で説明した逆行列を持つための条件として，行列は正方行列であるという条件を満たしていないためです．一般的に，サンプル数$N$と入力変数の数$M$は等しくないため$X$は正方行列ではなく，逆行列をもちません．それに対し，$X \\in \\mathcal{R}^{N \\times M}$ の場合，$X^{T}X \\in \\mathcal{R}^{M\\times M}$ となり，サンプル数に依存することなく，常に正方行列となります．\n",
        "\n",
        "また\n",
        "\n",
        "また$X^T X$が正方行列だからといって必ず逆行列を持つとは限らない，または逆行列を持ったとしても数値計算が不安定になるという問題がある．これについて，今回は解説しないが，疑似逆行列とよばれる手法を使うことが多い．\n",
        "\n",
        "推論の際は学習で得られたパラメータ$w$を用いて，\n",
        "$$\n",
        "y = w^{T}x\n",
        "$$\n",
        "のように計算すれば良い．\n",
        "\n",
        "\n",
        "\n",
        "## Numpyによる実装\n",
        "\n",
        "それでは，重回帰分析の実装を行います．PythonにはNumpyと呼ばれる線形代数を簡単に扱えるライブラリが広く使われている．次の章で紹介するChainerの中でもNumpyは多用されている．\n",
        "\n",
        "Pythonの文法に関しては把握していることを前提に進めてきます．具体的には，変数（数値・文字列，リスト，タプル，辞書），制御構文（for，if），関数，クラスを理解している必要があります\n",
        "\n",
        "重回帰分析では，最終的に最適なパラメータ $w$ が\n",
        "$$\n",
        "w=\\left( X^{T}X\\right)^{-1}X^{T}t\n",
        "$$\n"
      ]
    },
    {
      "metadata": {
        "id": "nEWUzLHYgkqe",
        "colab_type": "text"
      },
      "cell_type": "markdown",
      "source": [
        "で求まります．この最適なパラメータを求めるため次の5つを扱います．\n",
        "\n",
        "- ベクトルの定義\n",
        "- 行列の定義\n",
        "- 転置\n",
        "- 行列積\n",
        "- 逆行列\n",
        "\n",
        "具体的に，以下のようなデータセットが与えられているケースを想定してみましょう．\n",
        "\n",
        "$$\n",
        "X = \n",
        "\\begin{bmatrix}\n",
        "1 & 2 & 3 \\\\\n",
        "1 & 2 & 5 \\\\\n",
        "1 & 3 & 4 \\\\  \n",
        "1 & 5 & 9 \n",
        "\\end{bmatrix}, \\\n",
        "t = \n",
        "\\begin{bmatrix}\n",
        "1 \\\\ 5 \\\\ 6 \\\\ 8\n",
        "\\end{bmatrix}\n",
        "$$\n",
        "\n",
        "それぞれの実装について，見ていきましょう．まずは，Numpyの読み込みから始めます．numpyはnpと省略するのが一般的です．"
      ]
    },
    {
      "metadata": {
        "id": "fGwOZZrpgkqf",
        "colab_type": "code",
        "colab": {}
      },
      "cell_type": "code",
      "source": [
        "import numpy as np"
      ],
      "execution_count": 0,
      "outputs": []
    },
    {
      "metadata": {
        "id": "7gIRGUsagkqj",
        "colab_type": "text"
      },
      "cell_type": "markdown",
      "source": [
        "ベクトルの定義は以下のように行います．"
      ]
    },
    {
      "metadata": {
        "id": "3D_PBfF-gkqk",
        "colab_type": "code",
        "colab": {}
      },
      "cell_type": "code",
      "source": [
        "t = np.array([[1], [5], [6], [8]])"
      ],
      "execution_count": 0,
      "outputs": []
    },
    {
      "metadata": {
        "id": "wvkLMrfagkqn",
        "colab_type": "code",
        "outputId": "19715d2c-2175-490f-9764-58521460a67c",
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 34
        }
      },
      "cell_type": "code",
      "source": [
        "print(t.shape)"
      ],
      "execution_count": 3,
      "outputs": [
        {
          "output_type": "stream",
          "text": [
            "(4, 1)\n"
          ],
          "name": "stdout"
        }
      ]
    },
    {
      "metadata": {
        "id": "YZk0XXaggkqs",
        "colab_type": "text"
      },
      "cell_type": "markdown",
      "source": [
        "つぎに，行列の定義も行いましょう．"
      ]
    },
    {
      "metadata": {
        "id": "EzhLV1Bbgkqt",
        "colab_type": "code",
        "colab": {}
      },
      "cell_type": "code",
      "source": [
        "X = np.array([\n",
        "    [1, 2, 3],\n",
        "    [1, 2, 5],\n",
        "    [1, 3, 4],\n",
        "    [1, 5, 9]\n",
        "])"
      ],
      "execution_count": 0,
      "outputs": []
    },
    {
      "metadata": {
        "id": "FqFtBUWogkqv",
        "colab_type": "code",
        "outputId": "150b8c29-f4db-4aa0-cb39-a957f49a1f38",
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 85
        }
      },
      "cell_type": "code",
      "source": [
        "print(X)"
      ],
      "execution_count": 5,
      "outputs": [
        {
          "output_type": "stream",
          "text": [
            "[[1 2 3]\n",
            " [1 2 5]\n",
            " [1 3 4]\n",
            " [1 5 9]]\n"
          ],
          "name": "stdout"
        }
      ]
    },
    {
      "metadata": {
        "id": "9sqyWxPtgkqy",
        "colab_type": "text"
      },
      "cell_type": "markdown",
      "source": [
        "次は行列の転地を行う．Numpyの`array`で定義されている場合，`.T`をつけるだけで転置ができる．"
      ]
    },
    {
      "metadata": {
        "id": "37CU9Oxbgkqz",
        "colab_type": "code",
        "outputId": "ea625bd0-ddc1-4c43-9718-9e68dbe62358",
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 68
        }
      },
      "cell_type": "code",
      "source": [
        "print(X.T)"
      ],
      "execution_count": 6,
      "outputs": [
        {
          "output_type": "stream",
          "text": [
            "[[1 1 1 1]\n",
            " [2 2 3 5]\n",
            " [3 5 4 9]]\n"
          ],
          "name": "stdout"
        }
      ]
    },
    {
      "metadata": {
        "id": "ldYLD5bvgkq2",
        "colab_type": "text"
      },
      "cell_type": "markdown",
      "source": [
        "次に，行列積は `np.dot` によって実現できる．行列積の際には最初の行列の列数と二番目の行列の行数が同じであることに注意する．"
      ]
    },
    {
      "metadata": {
        "id": "A3O7b9f_gkq3",
        "colab_type": "code",
        "colab": {}
      },
      "cell_type": "code",
      "source": [
        "XX = np.dot(X.T, X)"
      ],
      "execution_count": 0,
      "outputs": []
    },
    {
      "metadata": {
        "id": "Z0NegHI1gkq5",
        "colab_type": "code",
        "outputId": "c5ae351b-6f24-4541-f1b5-3b8d41be73a4",
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 68
        }
      },
      "cell_type": "code",
      "source": [
        "print(XX)"
      ],
      "execution_count": 8,
      "outputs": [
        {
          "output_type": "stream",
          "text": [
            "[[  4  12  21]\n",
            " [ 12  42  73]\n",
            " [ 21  73 131]]\n"
          ],
          "name": "stdout"
        }
      ]
    },
    {
      "metadata": {
        "id": "iplfLUwLgkq7",
        "colab_type": "text"
      },
      "cell_type": "markdown",
      "source": [
        "つぎに，この逆行列を求めるには，`np.linalg.inv` を用いる．"
      ]
    },
    {
      "metadata": {
        "id": "ObrhRVp9gkq9",
        "colab_type": "code",
        "colab": {}
      },
      "cell_type": "code",
      "source": [
        "XX_inv = np.linalg.inv(XX)"
      ],
      "execution_count": 0,
      "outputs": []
    },
    {
      "metadata": {
        "id": "L8g_2AiEgkq_",
        "colab_type": "code",
        "outputId": "d894dd47-dd05-4d91-8fc1-6ef7cebab813",
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 68
        }
      },
      "cell_type": "code",
      "source": [
        "print(XX_inv)"
      ],
      "execution_count": 10,
      "outputs": [
        {
          "output_type": "stream",
          "text": [
            "[[ 1.76530612 -0.39795918 -0.06122449]\n",
            " [-0.39795918  0.84693878 -0.40816327]\n",
            " [-0.06122449 -0.40816327  0.24489796]]\n"
          ],
          "name": "stdout"
        }
      ]
    },
    {
      "metadata": {
        "id": "NKYcw6LKgkrC",
        "colab_type": "text"
      },
      "cell_type": "markdown",
      "source": [
        "これで重回帰分析のために必要な演算がそろった．最適なパラメータを求めると，"
      ]
    },
    {
      "metadata": {
        "id": "ylySvhxIgkrD",
        "colab_type": "code",
        "colab": {}
      },
      "cell_type": "code",
      "source": [
        "Xt = np.dot(X.T, t)"
      ],
      "execution_count": 0,
      "outputs": []
    },
    {
      "metadata": {
        "id": "25WHiBcngkrG",
        "colab_type": "code",
        "outputId": "40ccf60f-ff8a-4c54-ae7e-5890920c0db3",
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 68
        }
      },
      "cell_type": "code",
      "source": [
        "print(Xt)"
      ],
      "execution_count": 12,
      "outputs": [
        {
          "output_type": "stream",
          "text": [
            "[[ 20]\n",
            " [ 70]\n",
            " [124]]\n"
          ],
          "name": "stdout"
        }
      ]
    },
    {
      "metadata": {
        "id": "EBeA2-K6gkrJ",
        "colab_type": "code",
        "colab": {}
      },
      "cell_type": "code",
      "source": [
        "w = np.dot(XX_inv, Xt)"
      ],
      "execution_count": 0,
      "outputs": []
    },
    {
      "metadata": {
        "id": "NrxUwK_agkrM",
        "colab_type": "code",
        "outputId": "382ef65c-fa11-4095-90c2-428848f2a69a",
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 68
        }
      },
      "cell_type": "code",
      "source": [
        "print(w)"
      ],
      "execution_count": 14,
      "outputs": [
        {
          "output_type": "stream",
          "text": [
            "[[-0.14285714]\n",
            " [ 0.71428571]\n",
            " [ 0.57142857]]\n"
          ],
          "name": "stdout"
        }
      ]
    },
    {
      "metadata": {
        "id": "ywmGQVhkgkrO",
        "colab_type": "text"
      },
      "cell_type": "markdown",
      "source": [
        "このように求まります．Numpyを使うことで，数式をそのままプログラミング上で書くことができます．\n"
      ]
    },
    {
      "metadata": {
        "id": "628vvX-5gkrQ",
        "colab_type": "text"
      },
      "cell_type": "markdown",
      "source": [
        "## Scikit-learnによる本格的な実装"
      ]
    },
    {
      "metadata": {
        "id": "oqtA6Nx7gkrQ",
        "colab_type": "text"
      },
      "cell_type": "markdown",
      "source": [
        "重回帰分析であればNumpyで簡単に実装することができましたが，本格的に使用していくアルゴリズムは初学者が一から書くには難しく，またその必要はない．PythonではScikit-learnと呼ばれる機械学習用のフレームワークが公開されており，初学者でも簡単に扱うことができます．\n",
        "\n",
        "まずは重回帰分析をScikit-learnによって実装してみましょう．\n",
        "\n",
        "### Scikit-learn基礎編\n",
        "\n",
        "Scikit-learnは`sklearn`という名前で呼び出すことができます．"
      ]
    },
    {
      "metadata": {
        "id": "6ZDhyHrLgkrR",
        "colab_type": "code",
        "colab": {}
      },
      "cell_type": "code",
      "source": [
        "import sklearn"
      ],
      "execution_count": 0,
      "outputs": []
    },
    {
      "metadata": {
        "id": "3w3prI31gkrS",
        "colab_type": "text"
      },
      "cell_type": "markdown",
      "source": [
        "たとえば，重回帰分析を使用する場合は以下のように呼び出す．"
      ]
    },
    {
      "metadata": {
        "id": "rO2FY4z-gkrU",
        "colab_type": "code",
        "colab": {}
      },
      "cell_type": "code",
      "source": [
        "from sklearn.linear_model import LinearRegression"
      ],
      "execution_count": 0,
      "outputs": []
    },
    {
      "metadata": {
        "id": "dUa3WMP_gkrW",
        "colab_type": "text"
      },
      "cell_type": "markdown",
      "source": [
        "なお，numpyの時もそうだが，使い方を調べる際，[公式のリファレンス](http://scikit-learn.org/)に加えて，「重回帰分析 Scikit-learn」というように検索して，実例のソースコードを見るほうが早い場合も多くあります．\n",
        "\n",
        "はじめにアルゴリズムのインスタンス化を行います．"
      ]
    },
    {
      "metadata": {
        "id": "bg67nok0gkrW",
        "colab_type": "code",
        "colab": {}
      },
      "cell_type": "code",
      "source": [
        "model = LinearRegression()"
      ],
      "execution_count": 0,
      "outputs": []
    },
    {
      "metadata": {
        "id": "cgBhZO74gkrY",
        "colab_type": "text"
      },
      "cell_type": "markdown",
      "source": [
        "これで重回帰分析を使用するための準備がおわりました．次にパラメータの学習も以下のように行います．"
      ]
    },
    {
      "metadata": {
        "id": "qDh1NHMzgkrZ",
        "colab_type": "code",
        "outputId": "31137057-c10f-4801-cd77-1dd0a7e7a6ff",
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 34
        }
      },
      "cell_type": "code",
      "source": [
        "model.fit(X, t)"
      ],
      "execution_count": 18,
      "outputs": [
        {
          "output_type": "execute_result",
          "data": {
            "text/plain": [
              "LinearRegression(copy_X=True, fit_intercept=True, n_jobs=1, normalize=False)"
            ]
          },
          "metadata": {
            "tags": []
          },
          "execution_count": 18
        }
      ]
    },
    {
      "metadata": {
        "id": "2ExQLeEvgkrc",
        "colab_type": "text"
      },
      "cell_type": "markdown",
      "source": [
        "最後にどのような結果が得られたかの検証は次のように行なえます．"
      ]
    },
    {
      "metadata": {
        "id": "-tn3Hzzrgkrc",
        "colab_type": "code",
        "outputId": "93b3c72e-78ec-45b0-9d67-0602ef5c7dce",
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 34
        }
      },
      "cell_type": "code",
      "source": [
        "model.score(X, t)"
      ],
      "execution_count": 19,
      "outputs": [
        {
          "output_type": "execute_result",
          "data": {
            "text/plain": [
              "0.6923076923076923"
            ]
          },
          "metadata": {
            "tags": []
          },
          "execution_count": 19
        }
      ]
    },
    {
      "metadata": {
        "id": "a3mHBppJgkre",
        "colab_type": "text"
      },
      "cell_type": "markdown",
      "source": [
        "回帰では**決定係数**と呼ばれる指標が，分類の場合は**精度**が自動的に計算されるようになっている．どちらも1に近ければうまくモデルがデータを説明できていることになります．\n",
        "このように，簡単なインターフェースで機械学習のモデルを構築し，学習できるようになっています．Scikit-learnの良い点は最初にアルゴリズムを決めてしまえば，どのアルゴリズムでも，`.fit`で学習，`.score`で検証が行える点です．\n",
        "\n",
        "また，アルゴリズムによって内容は多少異なるが，パラメータもインスタンス変数として格納されているため，学習後に確認することができます．"
      ]
    },
    {
      "metadata": {
        "id": "dZ8hcHPOgkrf",
        "colab_type": "code",
        "outputId": "ea2af72f-2aec-408a-e214-7f8a5c1256aa",
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 34
        }
      },
      "cell_type": "code",
      "source": [
        "# パラメータw\n",
        "model.coef_"
      ],
      "execution_count": 20,
      "outputs": [
        {
          "output_type": "execute_result",
          "data": {
            "text/plain": [
              "array([[0.        , 0.71428571, 0.57142857]])"
            ]
          },
          "metadata": {
            "tags": []
          },
          "execution_count": 20
        }
      ]
    },
    {
      "metadata": {
        "id": "p-GWtJtzgkri",
        "colab_type": "code",
        "outputId": "0859ed8e-50d6-4f7b-c2cc-ffc3f3cf2248",
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 34
        }
      },
      "cell_type": "code",
      "source": [
        "# バイアスb\n",
        "model.intercept_"
      ],
      "execution_count": 21,
      "outputs": [
        {
          "output_type": "execute_result",
          "data": {
            "text/plain": [
              "array([-0.14285714])"
            ]
          },
          "metadata": {
            "tags": []
          },
          "execution_count": 21
        }
      ]
    },
    {
      "metadata": {
        "id": "4A_yH9TDgkrk",
        "colab_type": "text"
      },
      "cell_type": "markdown",
      "source": [
        "この例からわかるように，Scikit-learnでは，パラメータとバイアスがそれぞれ準備されているため，入力変数$X$の左端の列に1を格納した変数を入れる必要はありません．"
      ]
    },
    {
      "metadata": {
        "id": "fhWWDdKvgkrl",
        "colab_type": "text"
      },
      "cell_type": "markdown",
      "source": [
        "### Scikit-learn応用編\n",
        "\n",
        "Scikit-learnは機械学習の実装を支援する多くの機能を兼ね備えています．\n",
        "\n",
        "まず最初にサンプルのデータセットの取り扱いを紹介します．Scikit-learnには学び始めでテストするために，データセットがいくつか提供されています．今回は，この提供されているデータセットの中で`load_boston`というボストン近郊の家賃に関するデータセットを使って説明してきます．"
      ]
    },
    {
      "metadata": {
        "id": "Y9awRCongkrm",
        "colab_type": "code",
        "colab": {}
      },
      "cell_type": "code",
      "source": [
        "from sklearn.datasets import load_boston"
      ],
      "execution_count": 0,
      "outputs": []
    },
    {
      "metadata": {
        "id": "nAJ35obhgkro",
        "colab_type": "code",
        "colab": {}
      },
      "cell_type": "code",
      "source": [
        "boston = load_boston()"
      ],
      "execution_count": 0,
      "outputs": []
    },
    {
      "metadata": {
        "id": "ZH0kGNx3gkrq",
        "colab_type": "text"
      },
      "cell_type": "markdown",
      "source": [
        "変数の`boston`には辞書と同じ形式で格納されており，変数の中身を見ながら入力変数と教師データに対応するものを見つけていきます．"
      ]
    },
    {
      "metadata": {
        "id": "n92-2_1qgkrr",
        "colab_type": "code",
        "colab": {}
      },
      "cell_type": "code",
      "source": [
        "X = boston['data']\n",
        "t = boston['target']"
      ],
      "execution_count": 0,
      "outputs": []
    },
    {
      "metadata": {
        "id": "CAy-YVdCgkrs",
        "colab_type": "code",
        "outputId": "54fedfe1-9d40-41fe-f7d2-c3b249e77b9a",
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 136
        }
      },
      "cell_type": "code",
      "source": [
        "print(X)"
      ],
      "execution_count": 25,
      "outputs": [
        {
          "output_type": "stream",
          "text": [
            "[[6.3200e-03 1.8000e+01 2.3100e+00 ... 1.5300e+01 3.9690e+02 4.9800e+00]\n",
            " [2.7310e-02 0.0000e+00 7.0700e+00 ... 1.7800e+01 3.9690e+02 9.1400e+00]\n",
            " [2.7290e-02 0.0000e+00 7.0700e+00 ... 1.7800e+01 3.9283e+02 4.0300e+00]\n",
            " ...\n",
            " [6.0760e-02 0.0000e+00 1.1930e+01 ... 2.1000e+01 3.9690e+02 5.6400e+00]\n",
            " [1.0959e-01 0.0000e+00 1.1930e+01 ... 2.1000e+01 3.9345e+02 6.4800e+00]\n",
            " [4.7410e-02 0.0000e+00 1.1930e+01 ... 2.1000e+01 3.9690e+02 7.8800e+00]]\n"
          ],
          "name": "stdout"
        }
      ]
    },
    {
      "metadata": {
        "id": "CRlnRqVCgkru",
        "colab_type": "code",
        "outputId": "7581bf33-67c0-4329-911c-e7da6caa20a2",
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 646
        }
      },
      "cell_type": "code",
      "source": [
        "print(t)"
      ],
      "execution_count": 26,
      "outputs": [
        {
          "output_type": "stream",
          "text": [
            "[24.  21.6 34.7 33.4 36.2 28.7 22.9 27.1 16.5 18.9 15.  18.9 21.7 20.4\n",
            " 18.2 19.9 23.1 17.5 20.2 18.2 13.6 19.6 15.2 14.5 15.6 13.9 16.6 14.8\n",
            " 18.4 21.  12.7 14.5 13.2 13.1 13.5 18.9 20.  21.  24.7 30.8 34.9 26.6\n",
            " 25.3 24.7 21.2 19.3 20.  16.6 14.4 19.4 19.7 20.5 25.  23.4 18.9 35.4\n",
            " 24.7 31.6 23.3 19.6 18.7 16.  22.2 25.  33.  23.5 19.4 22.  17.4 20.9\n",
            " 24.2 21.7 22.8 23.4 24.1 21.4 20.  20.8 21.2 20.3 28.  23.9 24.8 22.9\n",
            " 23.9 26.6 22.5 22.2 23.6 28.7 22.6 22.  22.9 25.  20.6 28.4 21.4 38.7\n",
            " 43.8 33.2 27.5 26.5 18.6 19.3 20.1 19.5 19.5 20.4 19.8 19.4 21.7 22.8\n",
            " 18.8 18.7 18.5 18.3 21.2 19.2 20.4 19.3 22.  20.3 20.5 17.3 18.8 21.4\n",
            " 15.7 16.2 18.  14.3 19.2 19.6 23.  18.4 15.6 18.1 17.4 17.1 13.3 17.8\n",
            " 14.  14.4 13.4 15.6 11.8 13.8 15.6 14.6 17.8 15.4 21.5 19.6 15.3 19.4\n",
            " 17.  15.6 13.1 41.3 24.3 23.3 27.  50.  50.  50.  22.7 25.  50.  23.8\n",
            " 23.8 22.3 17.4 19.1 23.1 23.6 22.6 29.4 23.2 24.6 29.9 37.2 39.8 36.2\n",
            " 37.9 32.5 26.4 29.6 50.  32.  29.8 34.9 37.  30.5 36.4 31.1 29.1 50.\n",
            " 33.3 30.3 34.6 34.9 32.9 24.1 42.3 48.5 50.  22.6 24.4 22.5 24.4 20.\n",
            " 21.7 19.3 22.4 28.1 23.7 25.  23.3 28.7 21.5 23.  26.7 21.7 27.5 30.1\n",
            " 44.8 50.  37.6 31.6 46.7 31.5 24.3 31.7 41.7 48.3 29.  24.  25.1 31.5\n",
            " 23.7 23.3 22.  20.1 22.2 23.7 17.6 18.5 24.3 20.5 24.5 26.2 24.4 24.8\n",
            " 29.6 42.8 21.9 20.9 44.  50.  36.  30.1 33.8 43.1 48.8 31.  36.5 22.8\n",
            " 30.7 50.  43.5 20.7 21.1 25.2 24.4 35.2 32.4 32.  33.2 33.1 29.1 35.1\n",
            " 45.4 35.4 46.  50.  32.2 22.  20.1 23.2 22.3 24.8 28.5 37.3 27.9 23.9\n",
            " 21.7 28.6 27.1 20.3 22.5 29.  24.8 22.  26.4 33.1 36.1 28.4 33.4 28.2\n",
            " 22.8 20.3 16.1 22.1 19.4 21.6 23.8 16.2 17.8 19.8 23.1 21.  23.8 23.1\n",
            " 20.4 18.5 25.  24.6 23.  22.2 19.3 22.6 19.8 17.1 19.4 22.2 20.7 21.1\n",
            " 19.5 18.5 20.6 19.  18.7 32.7 16.5 23.9 31.2 17.5 17.2 23.1 24.5 26.6\n",
            " 22.9 24.1 18.6 30.1 18.2 20.6 17.8 21.7 22.7 22.6 25.  19.9 20.8 16.8\n",
            " 21.9 27.5 21.9 23.1 50.  50.  50.  50.  50.  13.8 13.8 15.  13.9 13.3\n",
            " 13.1 10.2 10.4 10.9 11.3 12.3  8.8  7.2 10.5  7.4 10.2 11.5 15.1 23.2\n",
            "  9.7 13.8 12.7 13.1 12.5  8.5  5.   6.3  5.6  7.2 12.1  8.3  8.5  5.\n",
            " 11.9 27.9 17.2 27.5 15.  17.2 17.9 16.3  7.   7.2  7.5 10.4  8.8  8.4\n",
            " 16.7 14.2 20.8 13.4 11.7  8.3 10.2 10.9 11.   9.5 14.5 14.1 16.1 14.3\n",
            " 11.7 13.4  9.6  8.7  8.4 12.8 10.5 17.1 18.4 15.4 10.8 11.8 14.9 12.6\n",
            " 14.1 13.  13.4 15.2 16.1 17.8 14.9 14.1 12.7 13.5 14.9 20.  16.4 17.7\n",
            " 19.5 20.2 21.4 19.9 19.  19.1 19.1 20.1 19.9 19.6 23.2 29.8 13.8 13.3\n",
            " 16.7 12.  14.6 21.4 23.  23.7 25.  21.8 20.6 21.2 19.1 20.6 15.2  7.\n",
            "  8.1 13.6 20.1 21.8 24.5 23.1 19.7 18.3 21.2 17.5 16.8 22.4 20.6 23.9\n",
            " 22.  11.9]\n"
          ],
          "name": "stdout"
        }
      ]
    },
    {
      "metadata": {
        "id": "yfGHHW9Lgkrw",
        "colab_type": "text"
      },
      "cell_type": "markdown",
      "source": [
        "Numpyの形式で入力変数と教師データが格納されており，`.shape`を使うことで行と列の数を確認できる．"
      ]
    },
    {
      "metadata": {
        "id": "4FWdqix9gkrx",
        "colab_type": "code",
        "outputId": "b7c7d535-a502-47dc-af99-0758ddfc73a7",
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 34
        }
      },
      "cell_type": "code",
      "source": [
        "X.shape"
      ],
      "execution_count": 27,
      "outputs": [
        {
          "output_type": "execute_result",
          "data": {
            "text/plain": [
              "(506, 13)"
            ]
          },
          "metadata": {
            "tags": []
          },
          "execution_count": 27
        }
      ]
    },
    {
      "metadata": {
        "id": "MMJauZI6gkrz",
        "colab_type": "code",
        "outputId": "e0599fad-d5bc-4d99-cf9f-e68eb3440ec9",
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 34
        }
      },
      "cell_type": "code",
      "source": [
        "t.shape"
      ],
      "execution_count": 28,
      "outputs": [
        {
          "output_type": "execute_result",
          "data": {
            "text/plain": [
              "(506,)"
            ]
          },
          "metadata": {
            "tags": []
          },
          "execution_count": 28
        }
      ]
    },
    {
      "metadata": {
        "id": "DAz4OkiQgkr0",
        "colab_type": "text"
      },
      "cell_type": "markdown",
      "source": [
        "つぎに，訓練データと検証データの分割です．学習の時と同じデータを使って性能を検証した場合，モデルが学習データだけをうまくモデル化し，同じような分布からとられた未知のデータはうまくいかない場合があります．これを過学習とよびます．機械学習ではこれを防ぐために学習データと別に性能を評価する検証データを分けて評価します．このように分割して検証することを**ホールドアウト法**とよびます．\n",
        "\n",
        "Scikit-learnではこの訓練用と検証用を分割する機能が準備されています．"
      ]
    },
    {
      "metadata": {
        "id": "i_u6tuTjgkr0",
        "colab_type": "code",
        "colab": {}
      },
      "cell_type": "code",
      "source": [
        "from sklearn.model_selection import train_test_split"
      ],
      "execution_count": 0,
      "outputs": []
    },
    {
      "metadata": {
        "id": "WiYmSNmUgkr3",
        "colab_type": "code",
        "colab": {}
      },
      "cell_type": "code",
      "source": [
        "X_train, X_test, t_train, t_test = train_test_split(X, t, test_size=0.3, random_state=0)"
      ],
      "execution_count": 0,
      "outputs": []
    },
    {
      "metadata": {
        "id": "RhgL7BIcgkr5",
        "colab_type": "code",
        "outputId": "01e03308-2dde-4fdb-a6f8-51156ca25600",
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 34
        }
      },
      "cell_type": "code",
      "source": [
        "X_train.shape"
      ],
      "execution_count": 31,
      "outputs": [
        {
          "output_type": "execute_result",
          "data": {
            "text/plain": [
              "(354, 13)"
            ]
          },
          "metadata": {
            "tags": []
          },
          "execution_count": 31
        }
      ]
    },
    {
      "metadata": {
        "id": "hBLW2LSvgkr8",
        "colab_type": "code",
        "outputId": "67de70f4-c999-42f9-ffae-074e1ef39d81",
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 34
        }
      },
      "cell_type": "code",
      "source": [
        "X_test.shape"
      ],
      "execution_count": 32,
      "outputs": [
        {
          "output_type": "execute_result",
          "data": {
            "text/plain": [
              "(152, 13)"
            ]
          },
          "metadata": {
            "tags": []
          },
          "execution_count": 32
        }
      ]
    },
    {
      "metadata": {
        "id": "I7fyWug2gkr_",
        "colab_type": "text"
      },
      "cell_type": "markdown",
      "source": [
        "引数の`test_size`は検証用に使うデータの比率であり，0.3と指定すると全体の30%が検証データとなります．また，`random_state`は乱数のシードであり，再現性を確保するためのものです．なぜ乱数が登場するかというと，前から70%を訓練用，残りを検証用とするのではなく，全体からランダムに選択した70%を訓練用，残り30%を検証用と選択しているためです．"
      ]
    },
    {
      "metadata": {
        "id": "diF5y3KagksA",
        "colab_type": "text"
      },
      "cell_type": "markdown",
      "source": [
        "そして，訓練データを使って学習します．"
      ]
    },
    {
      "metadata": {
        "id": "fLAbvWQpgksB",
        "colab_type": "code",
        "colab": {}
      },
      "cell_type": "code",
      "source": [
        "model = LinearRegression()"
      ],
      "execution_count": 0,
      "outputs": []
    },
    {
      "metadata": {
        "id": "NzCNGVJggksC",
        "colab_type": "code",
        "outputId": "d626b521-0213-422e-db18-57645664879f",
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 34
        }
      },
      "cell_type": "code",
      "source": [
        "model.fit(X_train, t_train)"
      ],
      "execution_count": 34,
      "outputs": [
        {
          "output_type": "execute_result",
          "data": {
            "text/plain": [
              "LinearRegression(copy_X=True, fit_intercept=True, n_jobs=1, normalize=False)"
            ]
          },
          "metadata": {
            "tags": []
          },
          "execution_count": 34
        }
      ]
    },
    {
      "metadata": {
        "id": "Mp71dDdigksF",
        "colab_type": "text"
      },
      "cell_type": "markdown",
      "source": [
        "検証を行う場合は，訓練データと検証データの両方に対してチェックしておくと良いでしょう．"
      ]
    },
    {
      "metadata": {
        "id": "vyKcbKPmgksG",
        "colab_type": "code",
        "outputId": "f7f8e9e5-3d63-41db-951e-e346d4ed03a6",
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 34
        }
      },
      "cell_type": "code",
      "source": [
        "# 訓練データ\n",
        "model.score(X_train, t_train)"
      ],
      "execution_count": 35,
      "outputs": [
        {
          "output_type": "execute_result",
          "data": {
            "text/plain": [
              "0.7644563391821222"
            ]
          },
          "metadata": {
            "tags": []
          },
          "execution_count": 35
        }
      ]
    },
    {
      "metadata": {
        "id": "t4L3k-qIgksJ",
        "colab_type": "code",
        "outputId": "b9614e30-af6a-4e37-a6f7-1980765d1b78",
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 34
        }
      },
      "cell_type": "code",
      "source": [
        "# 検証データ\n",
        "model.score(X_test, t_test)"
      ],
      "execution_count": 36,
      "outputs": [
        {
          "output_type": "execute_result",
          "data": {
            "text/plain": [
              "0.6735280865347263"
            ]
          },
          "metadata": {
            "tags": []
          },
          "execution_count": 36
        }
      ]
    },
    {
      "metadata": {
        "id": "aduLwDDzgksK",
        "colab_type": "text"
      },
      "cell_type": "markdown",
      "source": [
        "検証データだけでなく，訓練データでも検証することで学習に失敗している場合の問題を切り分けることができます．\n",
        "\n",
        "|訓練データ|検証データ|結果|\n",
        "|:--|:--|:--|\n",
        "|×|×|未学習 アンダーフィッティング|\n",
        "|〇|×|過学習 オーバーフィッティング|\n",
        "|〇|〇|ＯＫ|\n",
        "\n",
        "\n",
        "**アンダーフィッティング**の場合は，現状の機械学習アルゴリズムでうまくデータを扱えていない場合であり，アルゴリズムを変更したり，入力となるデータの特徴を表せるような変換を考えます．逆に**オーバーフィッティング**の時は，そのアルゴリズムでデータをモデル化できていることはわかっている．この場合，モデルを過学習させないようにする．代表的な方法として，**ハイパーパラメータ**と呼ばれる各アルゴリズムのパラメータの学習に使われるパラメータの値を調整していくことで解決できることがある．このハイパーパラメータの調整は後述する．\n",
        "\n",
        "また，Scikit-learnでは，スケーリングも行うことができます．例えば，平均0，標準偏差1に変換するデータの正規化を行う場合は以下のようになります．"
      ]
    },
    {
      "metadata": {
        "id": "ZQPbALOogksM",
        "colab_type": "code",
        "colab": {}
      },
      "cell_type": "code",
      "source": [
        "from sklearn.preprocessing import StandardScaler"
      ],
      "execution_count": 0,
      "outputs": []
    },
    {
      "metadata": {
        "id": "jY8a3NB6gksP",
        "colab_type": "code",
        "colab": {}
      },
      "cell_type": "code",
      "source": [
        "# インスタンス化\n",
        "scaler = StandardScaler()"
      ],
      "execution_count": 0,
      "outputs": []
    },
    {
      "metadata": {
        "id": "NjUPZWDGgksS",
        "colab_type": "code",
        "outputId": "2439a95e-99ff-455f-ed40-ae1281a3aa8a",
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 34
        }
      },
      "cell_type": "code",
      "source": [
        "# 平均の分散（標準偏差）を学習\n",
        "scaler.fit(X_train)"
      ],
      "execution_count": 39,
      "outputs": [
        {
          "output_type": "execute_result",
          "data": {
            "text/plain": [
              "StandardScaler(copy=True, with_mean=True, with_std=True)"
            ]
          },
          "metadata": {
            "tags": []
          },
          "execution_count": 39
        }
      ]
    },
    {
      "metadata": {
        "id": "znyINvsRgksU",
        "colab_type": "code",
        "colab": {}
      },
      "cell_type": "code",
      "source": [
        "# 変換\n",
        "X_train_s = scaler.transform(X_train)\n",
        "X_test_s  = scaler.transform(X_test)"
      ],
      "execution_count": 0,
      "outputs": []
    },
    {
      "metadata": {
        "id": "9BX0f73zgksV",
        "colab_type": "code",
        "outputId": "371cda5b-01b6-4413-b5b3-7cd2c124a57b",
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 238
        }
      },
      "cell_type": "code",
      "source": [
        "print(X_train_s)"
      ],
      "execution_count": 41,
      "outputs": [
        {
          "output_type": "stream",
          "text": [
            "[[-0.20416267 -0.49997924  1.54801583 ...  1.2272573   0.42454294\n",
            "   3.10807269]\n",
            " [-0.38584317  0.34677427 -0.58974728 ...  0.05696346  0.40185312\n",
            "  -0.66643035]\n",
            " [-0.33266283 -0.49997924  1.54801583 ...  1.2272573   0.39846135\n",
            "   0.63936662]\n",
            " ...\n",
            " [-0.38147768 -0.49997924 -0.15303077 ... -0.30312696  0.39659002\n",
            "  -0.30284441]\n",
            " [-0.3720831  -0.49997924 -0.59690657 ... -0.25811566  0.37588849\n",
            "   0.89967717]\n",
            " [-0.38289844 -0.49997924 -1.00641779 ... -0.84326258  0.42454294\n",
            "   0.31822262]]\n"
          ],
          "name": "stdout"
        }
      ]
    },
    {
      "metadata": {
        "id": "ZxwWBjx1gksX",
        "colab_type": "code",
        "outputId": "a49d6be2-8a9b-4826-ff1e-5d0c341a4094",
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 238
        }
      },
      "cell_type": "code",
      "source": [
        "print(X_test_s)"
      ],
      "execution_count": 42,
      "outputs": [
        {
          "output_type": "stream",
          "text": [
            "[[-0.39152624 -0.49997924 -1.12239824 ... -0.70822867  0.17086147\n",
            "  -0.72160487]\n",
            " [ 0.70825498 -0.49997924  1.00534187 ...  0.77714428  0.0648977\n",
            "  -0.41177872]\n",
            " [-0.38588517 -0.49997924  0.4025299  ... -0.93328518  0.38758427\n",
            "  -0.27454978]\n",
            " ...\n",
            " [ 1.6177735  -0.49997924  1.00534187 ...  0.77714428  0.42454294\n",
            "   2.59876943]\n",
            " [-0.34043865 -0.49997924 -0.1687812  ... -0.03305915  0.42454294\n",
            "  -1.11772962]\n",
            " [-0.39601293 -0.49997924 -1.27417512 ...  0.10197476  0.39202867\n",
            "  -1.02294263]]\n"
          ],
          "name": "stdout"
        }
      ]
    },
    {
      "metadata": {
        "id": "h0HxE7UNgksa",
        "colab_type": "text"
      },
      "cell_type": "markdown",
      "source": [
        "## よく使われる機械学習アルゴリズムの紹介\n",
        "\n",
        "ここからはよく用いられる機械学習アルゴリズムについて特徴とともに紹介していきます．ここでは概要だけ紹介するので気になった場合は参考図書を見て学びを深めてほしい．\n",
        "\n",
        "Scikit-learnを使うことで実装は手軽に行うことができるが，内部挙動を理解していないがゆえに，うまくいかないときの対処法がわからないという問題もでてきます．ここでは．この問題につまずかないように，ハイパーパラメータのチューニングもあわせて紹介していきます．"
      ]
    },
    {
      "metadata": {
        "id": "cqUkbeg2gksa",
        "colab_type": "text"
      },
      "cell_type": "markdown",
      "source": [
        "### Support Vector Machine (SVM)\n",
        "\n",
        "SVMはよく使われる手法の一つであり，入出力間の非線形性を捉えることができます．ただし，非線形なモデルの場合，$y=wx^2$や，$y=w\\sin(x)$やその重ね合わせといったように組み合わせの候補が無限に存在するためモデルの設計は難しうなります．物理現象に基づいて入出力間の関係性が把握できていれば定式化のアイディアも存在しますが，そのような事前知識がある場合は多くはありません．そこで，SVMでは**カーネルトリック**と呼ばれるテクニックを利用し，データ間の類似度（カーネル）から入出力間の非線形性の定式化を行います．\n",
        "\n",
        "SVMには連続値を予測する**回帰 (Regression)** とカテゴリを予測する**分類 (Classification)** の両方に対応した手法があります．それぞれ，Support Vector Regression (SVR) と Support Vector Classification (SVC) と呼びます．まずは回帰の問題設定で紹介し，前回のボストン近郊の家賃の予測の例題を取扱います．\n",
        "\n",
        "#### Support Vector Regression (SVR)"
      ]
    },
    {
      "metadata": {
        "id": "kPcpQWgKgksb",
        "colab_type": "code",
        "colab": {}
      },
      "cell_type": "code",
      "source": [
        "# データの準備\n",
        "from sklearn.datasets import load_boston\n",
        "\n",
        "boston = load_boston()\n",
        "X = boston['data']\n",
        "t = boston['target']"
      ],
      "execution_count": 0,
      "outputs": []
    },
    {
      "metadata": {
        "id": "ptyZGd8sgksc",
        "colab_type": "code",
        "colab": {}
      },
      "cell_type": "code",
      "source": [
        "# 訓練と検証データの分割\n",
        "from sklearn.model_selection import train_test_split\n",
        "\n",
        "X_train, X_test, t_train, t_test = train_test_split(X, t, test_size=0.3, random_state=0)"
      ],
      "execution_count": 0,
      "outputs": []
    },
    {
      "metadata": {
        "id": "NMasImvjgkse",
        "colab_type": "code",
        "outputId": "063d81d7-6d0d-4a86-cd62-6bf073bd7852",
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 51
        }
      },
      "cell_type": "code",
      "source": [
        "# モデルのインスタンス化，学習\n",
        "from sklearn.svm import SVR\n",
        "\n",
        "model = SVR()\n",
        "model.fit(X_train, t_train)"
      ],
      "execution_count": 45,
      "outputs": [
        {
          "output_type": "execute_result",
          "data": {
            "text/plain": [
              "SVR(C=1.0, cache_size=200, coef0=0.0, degree=3, epsilon=0.1, gamma='auto',\n",
              "  kernel='rbf', max_iter=-1, shrinking=True, tol=0.001, verbose=False)"
            ]
          },
          "metadata": {
            "tags": []
          },
          "execution_count": 45
        }
      ]
    },
    {
      "metadata": {
        "id": "sNuRy8PBgksh",
        "colab_type": "code",
        "outputId": "e751328a-8296-42ae-bfcf-32a37b5cb06e",
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 34
        }
      },
      "cell_type": "code",
      "source": [
        "# 検証（訓練データ）\n",
        "model.score(X_train, t_train)"
      ],
      "execution_count": 46,
      "outputs": [
        {
          "output_type": "execute_result",
          "data": {
            "text/plain": [
              "0.14680479454958428"
            ]
          },
          "metadata": {
            "tags": []
          },
          "execution_count": 46
        }
      ]
    },
    {
      "metadata": {
        "id": "TVEipaLZgksj",
        "colab_type": "code",
        "outputId": "b0b1cfd6-4003-458e-d80c-647c453cc5bb",
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 34
        }
      },
      "cell_type": "code",
      "source": [
        "# 検証（検証データ）\n",
        "model.score(X_test, t_test)"
      ],
      "execution_count": 47,
      "outputs": [
        {
          "output_type": "execute_result",
          "data": {
            "text/plain": [
              "0.01018093344367077"
            ]
          },
          "metadata": {
            "tags": []
          },
          "execution_count": 47
        }
      ]
    },
    {
      "metadata": {
        "id": "Tw6ogkYIgksj",
        "colab_type": "text"
      },
      "cell_type": "markdown",
      "source": [
        "このようにSVRも，重回帰分析のケースとほとんど同じように実装できます．\n",
        "\n",
        "しかし結果は重回帰分析に比べて良くなっているとはいえません．\n",
        "ハイパーパラメータの調整が必要そうだが，その前に，スケーリングを行うことで改善ができる場合が多くあります．"
      ]
    },
    {
      "metadata": {
        "id": "CE_Rralsgksk",
        "colab_type": "code",
        "colab": {}
      },
      "cell_type": "code",
      "source": [
        "from sklearn.preprocessing import StandardScaler\n",
        "\n",
        "scaler = StandardScaler()\n",
        "scaler.fit(X_train)\n",
        "\n",
        "X_train_s = scaler.transform(X_train)\n",
        "X_test_s = scaler.transform(X_test)"
      ],
      "execution_count": 0,
      "outputs": []
    },
    {
      "metadata": {
        "id": "f93kogjOgksl",
        "colab_type": "code",
        "outputId": "c745ed14-dd4a-48df-cf5a-32089891ea36",
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 51
        }
      },
      "cell_type": "code",
      "source": [
        "# スケーリング後のデータを使って学習\n",
        "model.fit(X_train_s, t_train)"
      ],
      "execution_count": 49,
      "outputs": [
        {
          "output_type": "execute_result",
          "data": {
            "text/plain": [
              "SVR(C=1.0, cache_size=200, coef0=0.0, degree=3, epsilon=0.1, gamma='auto',\n",
              "  kernel='rbf', max_iter=-1, shrinking=True, tol=0.001, verbose=False)"
            ]
          },
          "metadata": {
            "tags": []
          },
          "execution_count": 49
        }
      ]
    },
    {
      "metadata": {
        "id": "HmTr1mHLgksn",
        "colab_type": "code",
        "outputId": "bcc23862-1aa1-4fa7-f897-9d5d4c9a417a",
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 34
        }
      },
      "cell_type": "code",
      "source": [
        "# 検証（訓練データ）\n",
        "model.score(X_train_s, t_train)"
      ],
      "execution_count": 50,
      "outputs": [
        {
          "output_type": "execute_result",
          "data": {
            "text/plain": [
              "0.697669153907031"
            ]
          },
          "metadata": {
            "tags": []
          },
          "execution_count": 50
        }
      ]
    },
    {
      "metadata": {
        "id": "oFLrK7IEgksr",
        "colab_type": "code",
        "outputId": "0826219c-7b87-4ef6-ea4d-fe73519158c7",
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 34
        }
      },
      "cell_type": "code",
      "source": [
        "# 検証（検証データ）\n",
        "model.score(X_test_s, t_test)"
      ],
      "execution_count": 51,
      "outputs": [
        {
          "output_type": "execute_result",
          "data": {
            "text/plain": [
              "0.5540391127752358"
            ]
          },
          "metadata": {
            "tags": []
          },
          "execution_count": 51
        }
      ]
    },
    {
      "metadata": {
        "id": "95eHlczMgkss",
        "colab_type": "text"
      },
      "cell_type": "markdown",
      "source": [
        "このように，大幅に結果を改善することができますスケーリングの影響を大きく受けるアルゴリズムと受けないアルゴリズムがあり，SVRを含むSVMはその影響を受けるアルゴリズムです．\n",
        "\n",
        "最後に，さらに精度を上げるためにハイパーパラメータの調整を行います．ハイパーパラメータの調整を行うときに注意すべき点があります．それは訓練データ（train）はパラメータの調整に用いるが，検証データ（test）を見ながらハイパーパラーメータの調整を行なってはいけないということです．．検証データはあくまで未知のデータに対する性能検証を行うために用意したものであり，ハイパーパラメータの調整に検証データを使用してしまうと検証データの情報が学習にリークし正しい検証ができなくなります．\n",
        "\n",
        "そこで，ハイパーパラメータの調整用にバリデーションデータ （val）を追加することが一般的です．\n",
        "\n",
        "![09.png](https://github.com/japan-medical-ai/medical-ai-course-materials/raw/master/notebooks/images/2/09.png)\n",
        "\n",
        "また，**交差検証法（クロスバリデーション）**という手法もあります．これは下図に示すようデータを複数パターン分割し，それらの性能の平均を評価する手法です．\n",
        "\n",
        "![10.png](https://github.com/japan-medical-ai/medical-ai-course-materials/raw/master/notebooks/images/2/10.png)"
      ]
    },
    {
      "metadata": {
        "id": "jUVIx2h4gkst",
        "colab_type": "text"
      },
      "cell_type": "markdown",
      "source": [
        "この分割数 $K$ として，K-fold Cross Validation (CV)と呼ばれることも多くあります．例えば上記の例だと $K=3$-CVとなります．\n",
        "\n",
        "それでは，SVRのハイパーパラメータ調整を交差検証法を使って行いましょう．Scikit-learnではハイパーパラメータ調整のための機能も`GridSearchCV`という名前で準備されています．グリッドサーチとは各組合せをすべて試す探索方法である．それ以外の方法として，ランダムサーチとベイズ最適化による探索もありますが，ここは余裕がでてきた段階でさらに深める内容のひとつとしてください．"
      ]
    },
    {
      "metadata": {
        "id": "G5-SN2Edgkst",
        "colab_type": "code",
        "colab": {}
      },
      "cell_type": "code",
      "source": [
        "from sklearn.model_selection import GridSearchCV"
      ],
      "execution_count": 0,
      "outputs": []
    },
    {
      "metadata": {
        "id": "X6nNmSfagksu",
        "colab_type": "code",
        "colab": {}
      },
      "cell_type": "code",
      "source": [
        "# 調整を行うハイパーパラメータの値の候補\n",
        "param_grid = [\n",
        "    {'C': [1, 10, 100], 'gamma': [0.01, 0.1, 1, 10]}\n",
        "]"
      ],
      "execution_count": 0,
      "outputs": []
    },
    {
      "metadata": {
        "id": "MePeiexCgksv",
        "colab_type": "code",
        "outputId": "46b16a1a-412b-42dd-abd7-0eb969c390da",
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 136
        }
      },
      "cell_type": "code",
      "source": [
        "# 交差検証法を使用したハイパーパラメータの各組合せでの学習\n",
        "model_cv = GridSearchCV(SVR(), param_grid, cv=3, scoring='neg_mean_squared_error')\n",
        "model_cv.fit(X_train_s, t_train)"
      ],
      "execution_count": 54,
      "outputs": [
        {
          "output_type": "execute_result",
          "data": {
            "text/plain": [
              "GridSearchCV(cv=3, error_score='raise',\n",
              "       estimator=SVR(C=1.0, cache_size=200, coef0=0.0, degree=3, epsilon=0.1, gamma='auto',\n",
              "  kernel='rbf', max_iter=-1, shrinking=True, tol=0.001, verbose=False),\n",
              "       fit_params=None, iid=True, n_jobs=1,\n",
              "       param_grid=[{'C': [1, 10, 100], 'gamma': [0.01, 0.1, 1, 10]}],\n",
              "       pre_dispatch='2*n_jobs', refit=True, return_train_score='warn',\n",
              "       scoring='neg_mean_squared_error', verbose=0)"
            ]
          },
          "metadata": {
            "tags": []
          },
          "execution_count": 54
        }
      ]
    },
    {
      "metadata": {
        "id": "0S3fmi1wgksy",
        "colab_type": "text"
      },
      "cell_type": "markdown",
      "source": [
        "交差検証法とハイパーパラメータのグリッドサーチもこれで完了です．各ハイパーパラメータでの結果ももちろん確認することができ，最も結果の良かったハイパーパラメータの値を引き継いだモデルの選択もできます．"
      ]
    },
    {
      "metadata": {
        "id": "9YLvqlAxgksy",
        "colab_type": "code",
        "outputId": "e7d5d7e0-285d-4008-bfca-e8ddadb61263",
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 275
        }
      },
      "cell_type": "code",
      "source": [
        "# 結果の確認 (valの対する結果)\n",
        "model_cv.grid_scores_"
      ],
      "execution_count": 55,
      "outputs": [
        {
          "output_type": "stream",
          "text": [
            "/usr/local/lib/python3.6/dist-packages/sklearn/model_selection/_search.py:762: DeprecationWarning: The grid_scores_ attribute was deprecated in version 0.18 in favor of the more elaborate cv_results_ attribute. The grid_scores_ attribute will not be available from 0.20\n",
            "  DeprecationWarning)\n"
          ],
          "name": "stderr"
        },
        {
          "output_type": "execute_result",
          "data": {
            "text/plain": [
              "[mean: -40.88957, std: 12.03388, params: {'C': 1, 'gamma': 0.01},\n",
              " mean: -34.94548, std: 12.18057, params: {'C': 1, 'gamma': 0.1},\n",
              " mean: -72.62060, std: 15.99632, params: {'C': 1, 'gamma': 1},\n",
              " mean: -86.25200, std: 16.38372, params: {'C': 1, 'gamma': 10},\n",
              " mean: -17.67763, std: 6.48783, params: {'C': 10, 'gamma': 0.01},\n",
              " mean: -16.46703, std: 7.03969, params: {'C': 10, 'gamma': 0.1},\n",
              " mean: -43.71719, std: 13.22953, params: {'C': 10, 'gamma': 1},\n",
              " mean: -81.13324, std: 15.21847, params: {'C': 10, 'gamma': 10},\n",
              " mean: -13.83363, std: 3.54540, params: {'C': 100, 'gamma': 0.01},\n",
              " mean: -14.61609, std: 7.20850, params: {'C': 100, 'gamma': 0.1},\n",
              " mean: -37.47299, std: 9.87515, params: {'C': 100, 'gamma': 1},\n",
              " mean: -77.95797, std: 12.36436, params: {'C': 100, 'gamma': 10}]"
            ]
          },
          "metadata": {
            "tags": []
          },
          "execution_count": 55
        }
      ]
    },
    {
      "metadata": {
        "id": "fHEtZgI_gksz",
        "colab_type": "code",
        "outputId": "9c4db27e-e6bc-4bfe-b6b2-5901d1510ff1",
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 34
        }
      },
      "cell_type": "code",
      "source": [
        "# 最も結果が良かったハイパーパラメータ\n",
        "model_cv.best_params_"
      ],
      "execution_count": 56,
      "outputs": [
        {
          "output_type": "execute_result",
          "data": {
            "text/plain": [
              "{'C': 100, 'gamma': 0.01}"
            ]
          },
          "metadata": {
            "tags": []
          },
          "execution_count": 56
        }
      ]
    },
    {
      "metadata": {
        "id": "muiY4--Mgks1",
        "colab_type": "code",
        "colab": {}
      },
      "cell_type": "code",
      "source": [
        "# 最も結果が良かったハイパーパラメータの値を設定したモデル\n",
        "model = model_cv.best_estimator_"
      ],
      "execution_count": 0,
      "outputs": []
    },
    {
      "metadata": {
        "id": "bqJMy6_Cgks2",
        "colab_type": "code",
        "outputId": "8835ad02-8658-4300-cc30-ea8857f2f742",
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 34
        }
      },
      "cell_type": "code",
      "source": [
        "# 検証（検証データ）\n",
        "model.score(X_test_s, t_test)"
      ],
      "execution_count": 58,
      "outputs": [
        {
          "output_type": "execute_result",
          "data": {
            "text/plain": [
              "0.7685336670918768"
            ]
          },
          "metadata": {
            "tags": []
          },
          "execution_count": 58
        }
      ]
    },
    {
      "metadata": {
        "id": "sre22-okgks5",
        "colab_type": "text"
      },
      "cell_type": "markdown",
      "source": [
        "ここまでがアルゴリズムの調整である．実際には特徴量の選択や外れ値除去など前処理も込みで行うため，ここまでシンプルに完了できるものではないが，まずはこの流れを覚えていただきたい．\n",
        "\n",
        "1. スケーリング無　score:0.010\n",
        "2. スケーリング有　score:0.554\n",
        "3. スケーリング＋ハイパーパラメータの調整有　0.7685"
      ]
    },
    {
      "metadata": {
        "id": "_dHtoHpSgks5",
        "colab_type": "text"
      },
      "cell_type": "markdown",
      "source": [
        "#### Support Vector Classification (SVC)\n",
        "\n",
        "次に，SVMの分類であるSVCも同様にスケーリングからハイパーパラメータの調整まで行う．分類の例題では，乳がんの患者か否かといったこれもScikit-learn側で準備されているデータセットを使用する．"
      ]
    },
    {
      "metadata": {
        "id": "JxxKw_CSgks5",
        "colab_type": "code",
        "colab": {}
      },
      "cell_type": "code",
      "source": [
        "# データセットの準備\n",
        "from sklearn.datasets import load_breast_cancer\n",
        "\n",
        "breast_cancer = load_breast_cancer()\n",
        "X = breast_cancer['data']\n",
        "t = breast_cancer['target']"
      ],
      "execution_count": 0,
      "outputs": []
    },
    {
      "metadata": {
        "id": "M75C9HEpgks6",
        "colab_type": "code",
        "outputId": "e2f84568-2910-4290-f0e3-d03c62121956",
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 34
        }
      },
      "cell_type": "code",
      "source": [
        "X.shape"
      ],
      "execution_count": 60,
      "outputs": [
        {
          "output_type": "execute_result",
          "data": {
            "text/plain": [
              "(569, 30)"
            ]
          },
          "metadata": {
            "tags": []
          },
          "execution_count": 60
        }
      ]
    },
    {
      "metadata": {
        "id": "EJcs3sSxgks7",
        "colab_type": "code",
        "outputId": "45f260f8-56d5-4272-eec8-6ec876d0910c",
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 136
        }
      },
      "cell_type": "code",
      "source": [
        "print(X)"
      ],
      "execution_count": 61,
      "outputs": [
        {
          "output_type": "stream",
          "text": [
            "[[1.799e+01 1.038e+01 1.228e+02 ... 2.654e-01 4.601e-01 1.189e-01]\n",
            " [2.057e+01 1.777e+01 1.329e+02 ... 1.860e-01 2.750e-01 8.902e-02]\n",
            " [1.969e+01 2.125e+01 1.300e+02 ... 2.430e-01 3.613e-01 8.758e-02]\n",
            " ...\n",
            " [1.660e+01 2.808e+01 1.083e+02 ... 1.418e-01 2.218e-01 7.820e-02]\n",
            " [2.060e+01 2.933e+01 1.401e+02 ... 2.650e-01 4.087e-01 1.240e-01]\n",
            " [7.760e+00 2.454e+01 4.792e+01 ... 0.000e+00 2.871e-01 7.039e-02]]\n"
          ],
          "name": "stdout"
        }
      ]
    },
    {
      "metadata": {
        "id": "XyIz7spqgks-",
        "colab_type": "code",
        "outputId": "8bc5ef69-e72d-49b7-97f1-075e46ef28b4",
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 289
        }
      },
      "cell_type": "code",
      "source": [
        "print(t)"
      ],
      "execution_count": 62,
      "outputs": [
        {
          "output_type": "stream",
          "text": [
            "[0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 1 1 1 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0\n",
            " 1 0 0 0 0 0 0 0 0 1 0 1 1 1 1 1 0 0 1 0 0 1 1 1 1 0 1 0 0 1 1 1 1 0 1 0 0\n",
            " 1 0 1 0 0 1 1 1 0 0 1 0 0 0 1 1 1 0 1 1 0 0 1 1 1 0 0 1 1 1 1 0 1 1 0 1 1\n",
            " 1 1 1 1 1 1 0 0 0 1 0 0 1 1 1 0 0 1 0 1 0 0 1 0 0 1 1 0 1 1 0 1 1 1 1 0 1\n",
            " 1 1 1 1 1 1 1 1 0 1 1 1 1 0 0 1 0 1 1 0 0 1 1 0 0 1 1 1 1 0 1 1 0 0 0 1 0\n",
            " 1 0 1 1 1 0 1 1 0 0 1 0 0 0 0 1 0 0 0 1 0 1 0 1 1 0 1 0 0 0 0 1 1 0 0 1 1\n",
            " 1 0 1 1 1 1 1 0 0 1 1 0 1 1 0 0 1 0 1 1 1 1 0 1 1 1 1 1 0 1 0 0 0 0 0 0 0\n",
            " 0 0 0 0 0 0 0 1 1 1 1 1 1 0 1 0 1 1 0 1 1 0 1 0 0 1 1 1 1 1 1 1 1 1 1 1 1\n",
            " 1 0 1 1 0 1 0 1 1 1 1 1 1 1 1 1 1 1 1 1 1 0 1 1 1 0 1 0 1 1 1 1 0 0 0 1 1\n",
            " 1 1 0 1 0 1 0 1 1 1 0 1 1 1 1 1 1 1 0 0 0 1 1 1 1 1 1 1 1 1 1 1 0 0 1 0 0\n",
            " 0 1 0 0 1 1 1 1 1 0 1 1 1 1 1 0 1 1 1 0 1 1 0 0 1 1 1 1 1 1 0 1 1 1 1 1 1\n",
            " 1 0 1 1 1 1 1 0 1 1 0 1 1 1 1 1 1 1 1 1 1 1 1 0 1 0 0 1 0 1 1 1 1 1 0 1 1\n",
            " 0 1 0 1 1 0 1 0 1 1 1 1 1 1 1 1 0 0 1 1 1 1 1 1 0 1 1 1 1 1 1 1 1 1 1 0 1\n",
            " 1 1 1 1 1 1 0 1 0 1 1 0 1 1 1 1 1 0 0 1 0 1 0 1 1 1 1 1 0 1 1 0 1 0 1 0 0\n",
            " 1 1 1 0 1 1 1 1 1 1 1 1 1 1 1 0 1 0 0 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1\n",
            " 1 1 1 1 1 1 1 0 0 0 0 0 0 1]\n"
          ],
          "name": "stdout"
        }
      ]
    },
    {
      "metadata": {
        "id": "OhD51onVgks_",
        "colab_type": "text"
      },
      "cell_type": "markdown",
      "source": [
        "上記からわかるように，入力変数のスケールは統一されていないことがわかる．"
      ]
    },
    {
      "metadata": {
        "id": "fuTM1tSZgktA",
        "colab_type": "code",
        "colab": {}
      },
      "cell_type": "code",
      "source": [
        "# 訓練データと検証データに分割\n",
        "from sklearn.model_selection import train_test_split\n",
        "\n",
        "X_train, X_test, t_train, t_test = train_test_split(X, t, test_size=0.3, random_state=0)"
      ],
      "execution_count": 0,
      "outputs": []
    },
    {
      "metadata": {
        "id": "83YmTwl_gktA",
        "colab_type": "code",
        "outputId": "9b0f26b5-10b4-4d81-de69-11b3b872b447",
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 85
        }
      },
      "cell_type": "code",
      "source": [
        "# スケーリング無で学習\n",
        "from sklearn.svm import SVC\n",
        "\n",
        "model = SVC()\n",
        "model.fit(X_train, t_train)"
      ],
      "execution_count": 64,
      "outputs": [
        {
          "output_type": "execute_result",
          "data": {
            "text/plain": [
              "SVC(C=1.0, cache_size=200, class_weight=None, coef0=0.0,\n",
              "  decision_function_shape='ovr', degree=3, gamma='auto', kernel='rbf',\n",
              "  max_iter=-1, probability=False, random_state=None, shrinking=True,\n",
              "  tol=0.001, verbose=False)"
            ]
          },
          "metadata": {
            "tags": []
          },
          "execution_count": 64
        }
      ]
    },
    {
      "metadata": {
        "id": "_rv6PtaogktD",
        "colab_type": "code",
        "outputId": "95a60d91-3722-4ee8-96bc-4f4fe712e994",
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 34
        }
      },
      "cell_type": "code",
      "source": [
        "# 検証（訓練データ）\n",
        "model.score(X_train, t_train)"
      ],
      "execution_count": 65,
      "outputs": [
        {
          "output_type": "execute_result",
          "data": {
            "text/plain": [
              "1.0"
            ]
          },
          "metadata": {
            "tags": []
          },
          "execution_count": 65
        }
      ]
    },
    {
      "metadata": {
        "id": "Ym_N8KrSgktG",
        "colab_type": "code",
        "outputId": "a9c13298-df64-4bf3-fcc8-8314c5344ed4",
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 34
        }
      },
      "cell_type": "code",
      "source": [
        "# 検証（訓練データ）\n",
        "model.score(X_test, t_test)"
      ],
      "execution_count": 66,
      "outputs": [
        {
          "output_type": "execute_result",
          "data": {
            "text/plain": [
              "0.631578947368421"
            ]
          },
          "metadata": {
            "tags": []
          },
          "execution_count": 66
        }
      ]
    },
    {
      "metadata": {
        "id": "edy1MJP8gktH",
        "colab_type": "text"
      },
      "cell_type": "markdown",
      "source": [
        "分類では精度 (Accuracy) と呼ばれる指標の結果が得られる．例えば，100問中3問間違えると，Accuracyは0.97となる．\n",
        "\n",
        "次にスケーリングを行った後に学習させる．"
      ]
    },
    {
      "metadata": {
        "id": "_ovDrtOFgktH",
        "colab_type": "code",
        "colab": {}
      },
      "cell_type": "code",
      "source": [
        "# スケーリング\n",
        "from sklearn.preprocessing import StandardScaler\n",
        "\n",
        "scaler = StandardScaler()\n",
        "scaler.fit(X_train)\n",
        "\n",
        "X_train_s = scaler.transform(X_train)\n",
        "X_test_s  = scaler.transform(X_test)"
      ],
      "execution_count": 0,
      "outputs": []
    },
    {
      "metadata": {
        "id": "aftYSA-GgktI",
        "colab_type": "code",
        "outputId": "b0e9d7d0-820d-447e-a8f8-87f8fce430c3",
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 85
        }
      },
      "cell_type": "code",
      "source": [
        "# スケーリングしたデータを用いて学習\n",
        "model.fit(X_train_s, t_train)"
      ],
      "execution_count": 68,
      "outputs": [
        {
          "output_type": "execute_result",
          "data": {
            "text/plain": [
              "SVC(C=1.0, cache_size=200, class_weight=None, coef0=0.0,\n",
              "  decision_function_shape='ovr', degree=3, gamma='auto', kernel='rbf',\n",
              "  max_iter=-1, probability=False, random_state=None, shrinking=True,\n",
              "  tol=0.001, verbose=False)"
            ]
          },
          "metadata": {
            "tags": []
          },
          "execution_count": 68
        }
      ]
    },
    {
      "metadata": {
        "id": "-D_eORhhgktJ",
        "colab_type": "code",
        "outputId": "7a226e37-8621-4f54-ae13-5b6e445a51a8",
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 34
        }
      },
      "cell_type": "code",
      "source": [
        "# 検証（訓練データ）\n",
        "model.score(X_train_s, t_train)"
      ],
      "execution_count": 69,
      "outputs": [
        {
          "output_type": "execute_result",
          "data": {
            "text/plain": [
              "0.9824120603015075"
            ]
          },
          "metadata": {
            "tags": []
          },
          "execution_count": 69
        }
      ]
    },
    {
      "metadata": {
        "id": "DcEkUuSogktL",
        "colab_type": "code",
        "outputId": "77b1f7ab-b8b3-4053-feb3-91d52f469e5b",
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 34
        }
      },
      "cell_type": "code",
      "source": [
        "# 検証（検証データ）\n",
        "model.score(X_test_s, t_test)"
      ],
      "execution_count": 70,
      "outputs": [
        {
          "output_type": "execute_result",
          "data": {
            "text/plain": [
              "0.9766081871345029"
            ]
          },
          "metadata": {
            "tags": []
          },
          "execution_count": 70
        }
      ]
    },
    {
      "metadata": {
        "id": "0ZDZ91Q7gktO",
        "colab_type": "text"
      },
      "cell_type": "markdown",
      "source": [
        "このように精度が大幅に高まったことがわかる．最後にハイパーパラメータのチューニングを行う．"
      ]
    },
    {
      "metadata": {
        "id": "66xzKjtWgktO",
        "colab_type": "code",
        "colab": {}
      },
      "cell_type": "code",
      "source": [
        "from sklearn.model_selection import GridSearchCV"
      ],
      "execution_count": 0,
      "outputs": []
    },
    {
      "metadata": {
        "id": "XRCAqq69gktO",
        "colab_type": "code",
        "colab": {}
      },
      "cell_type": "code",
      "source": [
        "# 調整を行うハイパーパラメータの値の候補\n",
        "param_grid = [\n",
        "    {'C': [1, 10, 100], 'gamma': [0.01, 0.1, 1, 10]}\n",
        "]"
      ],
      "execution_count": 0,
      "outputs": []
    },
    {
      "metadata": {
        "id": "nSvbjehRgktP",
        "colab_type": "code",
        "outputId": "2df43678-9517-40ed-e3f8-85fbdf573a99",
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 170
        }
      },
      "cell_type": "code",
      "source": [
        "# 交差検証法を使用したハイパーパラメータの各組合せでの学習\n",
        "model_cv = GridSearchCV(SVC(), param_grid, cv=3)\n",
        "model_cv.fit(X_train_s, t_train)"
      ],
      "execution_count": 73,
      "outputs": [
        {
          "output_type": "execute_result",
          "data": {
            "text/plain": [
              "GridSearchCV(cv=3, error_score='raise',\n",
              "       estimator=SVC(C=1.0, cache_size=200, class_weight=None, coef0=0.0,\n",
              "  decision_function_shape='ovr', degree=3, gamma='auto', kernel='rbf',\n",
              "  max_iter=-1, probability=False, random_state=None, shrinking=True,\n",
              "  tol=0.001, verbose=False),\n",
              "       fit_params=None, iid=True, n_jobs=1,\n",
              "       param_grid=[{'C': [1, 10, 100], 'gamma': [0.01, 0.1, 1, 10]}],\n",
              "       pre_dispatch='2*n_jobs', refit=True, return_train_score='warn',\n",
              "       scoring=None, verbose=0)"
            ]
          },
          "metadata": {
            "tags": []
          },
          "execution_count": 73
        }
      ]
    },
    {
      "metadata": {
        "id": "TT-_mYfvgktR",
        "colab_type": "code",
        "outputId": "cb9dc336-d9ff-4464-e599-e9cb211b346c",
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 275
        }
      },
      "cell_type": "code",
      "source": [
        "# 結果の確認 (valの対する結果)\n",
        "model_cv.grid_scores_"
      ],
      "execution_count": 74,
      "outputs": [
        {
          "output_type": "stream",
          "text": [
            "/usr/local/lib/python3.6/dist-packages/sklearn/model_selection/_search.py:762: DeprecationWarning: The grid_scores_ attribute was deprecated in version 0.18 in favor of the more elaborate cv_results_ attribute. The grid_scores_ attribute will not be available from 0.20\n",
            "  DeprecationWarning)\n"
          ],
          "name": "stderr"
        },
        {
          "output_type": "execute_result",
          "data": {
            "text/plain": [
              "[mean: 0.96482, std: 0.01272, params: {'C': 1, 'gamma': 0.01},\n",
              " mean: 0.95226, std: 0.01543, params: {'C': 1, 'gamma': 0.1},\n",
              " mean: 0.62814, std: 0.00310, params: {'C': 1, 'gamma': 1},\n",
              " mean: 0.62563, std: 0.00223, params: {'C': 1, 'gamma': 10},\n",
              " mean: 0.97487, std: 0.01972, params: {'C': 10, 'gamma': 0.01},\n",
              " mean: 0.94472, std: 0.02474, params: {'C': 10, 'gamma': 0.1},\n",
              " mean: 0.63065, std: 0.00132, params: {'C': 10, 'gamma': 1},\n",
              " mean: 0.62563, std: 0.00223, params: {'C': 10, 'gamma': 10},\n",
              " mean: 0.94975, std: 0.01981, params: {'C': 100, 'gamma': 0.01},\n",
              " mean: 0.94472, std: 0.02474, params: {'C': 100, 'gamma': 0.1},\n",
              " mean: 0.63065, std: 0.00132, params: {'C': 100, 'gamma': 1},\n",
              " mean: 0.62563, std: 0.00223, params: {'C': 100, 'gamma': 10}]"
            ]
          },
          "metadata": {
            "tags": []
          },
          "execution_count": 74
        }
      ]
    },
    {
      "metadata": {
        "id": "ijHAC3ylgktS",
        "colab_type": "code",
        "outputId": "5c96bc85-9354-4dc0-eaf3-2f30a6075e03",
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 34
        }
      },
      "cell_type": "code",
      "source": [
        "# 最も結果が良かったハイパーパラメータ\n",
        "model_cv.best_params_"
      ],
      "execution_count": 75,
      "outputs": [
        {
          "output_type": "execute_result",
          "data": {
            "text/plain": [
              "{'C': 10, 'gamma': 0.01}"
            ]
          },
          "metadata": {
            "tags": []
          },
          "execution_count": 75
        }
      ]
    },
    {
      "metadata": {
        "id": "lGxQwIhWgktT",
        "colab_type": "code",
        "colab": {}
      },
      "cell_type": "code",
      "source": [
        "# 最も結果が良かったハイパーパラメータの値を設定したモデル\n",
        "model = model_cv.best_estimator_"
      ],
      "execution_count": 0,
      "outputs": []
    },
    {
      "metadata": {
        "id": "kMV60tW5gktU",
        "colab_type": "code",
        "outputId": "57eac0fd-947e-4c52-e11e-f1b9ac1db512",
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 34
        }
      },
      "cell_type": "code",
      "source": [
        "# 検証（検証データ）\n",
        "model.score(X_test_s, t_test)"
      ],
      "execution_count": 77,
      "outputs": [
        {
          "output_type": "execute_result",
          "data": {
            "text/plain": [
              "0.9883040935672515"
            ]
          },
          "metadata": {
            "tags": []
          },
          "execution_count": 77
        }
      ]
    },
    {
      "metadata": {
        "id": "pzvUUz06gktV",
        "colab_type": "text"
      },
      "cell_type": "markdown",
      "source": [
        "ハイパーパラメータの調整により，多少であるが改善することができた．"
      ]
    },
    {
      "metadata": {
        "id": "bQO1hkMpgktV",
        "colab_type": "text"
      },
      "cell_type": "markdown",
      "source": [
        "### Random Forest\n",
        "\n",
        "つぎに，決定木 (Dicision Tree) のアンサンブル学習であるランダムフォレストを紹介する．こちらも実用上良く使われる手法である．ランダムフォレスト含めた決定木系の手法では入力変数のスケールの違いによる影響はほとんど受けない．また，**カテゴリカル変数**と呼ばれる定量評価を行うことが難しい変数（例えば，男性 or 女性）も定量化を気にすることなく扱うことができるメリットがある．回帰と分類と両方準備されているため，それぞれについて紹介する．"
      ]
    },
    {
      "metadata": {
        "id": "_ezEZvdWgktV",
        "colab_type": "text"
      },
      "cell_type": "markdown",
      "source": [
        "#### 回帰 (Regression)"
      ]
    },
    {
      "metadata": {
        "id": "61TWLjTGgktV",
        "colab_type": "code",
        "colab": {}
      },
      "cell_type": "code",
      "source": [
        "# データの準備\n",
        "from sklearn.datasets import load_boston\n",
        "\n",
        "boston = load_boston()\n",
        "X = boston['data']\n",
        "t = boston['target']"
      ],
      "execution_count": 0,
      "outputs": []
    },
    {
      "metadata": {
        "id": "Ql9ZUOVRgktX",
        "colab_type": "code",
        "colab": {}
      },
      "cell_type": "code",
      "source": [
        "# 訓練と検証データの分割\n",
        "from sklearn.model_selection import train_test_split\n",
        "\n",
        "X_train, X_test, t_train, t_test = train_test_split(X, t, test_size=0.3, random_state=0)"
      ],
      "execution_count": 0,
      "outputs": []
    },
    {
      "metadata": {
        "id": "xp1xz9p7gktX",
        "colab_type": "code",
        "outputId": "cc0c8897-2be6-4251-bf8d-ea5f4ee338c3",
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 119
        }
      },
      "cell_type": "code",
      "source": [
        "# モデルのインスタンス化，学習\n",
        "from sklearn.ensemble import RandomForestRegressor\n",
        "\n",
        "model = RandomForestRegressor()\n",
        "model.fit(X_train, t_train)"
      ],
      "execution_count": 80,
      "outputs": [
        {
          "output_type": "execute_result",
          "data": {
            "text/plain": [
              "RandomForestRegressor(bootstrap=True, criterion='mse', max_depth=None,\n",
              "           max_features='auto', max_leaf_nodes=None,\n",
              "           min_impurity_decrease=0.0, min_impurity_split=None,\n",
              "           min_samples_leaf=1, min_samples_split=2,\n",
              "           min_weight_fraction_leaf=0.0, n_estimators=10, n_jobs=1,\n",
              "           oob_score=False, random_state=None, verbose=0, warm_start=False)"
            ]
          },
          "metadata": {
            "tags": []
          },
          "execution_count": 80
        }
      ]
    },
    {
      "metadata": {
        "id": "nt4vidWdgkta",
        "colab_type": "code",
        "outputId": "5163b311-5be3-47ce-8f54-6ec1912a6833",
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 34
        }
      },
      "cell_type": "code",
      "source": [
        "# 検証（訓練データ）\n",
        "model.score(X_train, t_train)"
      ],
      "execution_count": 81,
      "outputs": [
        {
          "output_type": "execute_result",
          "data": {
            "text/plain": [
              "0.9827106387591679"
            ]
          },
          "metadata": {
            "tags": []
          },
          "execution_count": 81
        }
      ]
    },
    {
      "metadata": {
        "id": "ZpaoNYaogktb",
        "colab_type": "code",
        "outputId": "2bb795f5-e670-4301-f2c7-94af1d1c8575",
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 34
        }
      },
      "cell_type": "code",
      "source": [
        "# 検証（検証データ）\n",
        "model.score(X_test, t_test)"
      ],
      "execution_count": 82,
      "outputs": [
        {
          "output_type": "execute_result",
          "data": {
            "text/plain": [
              "0.8253491402788222"
            ]
          },
          "metadata": {
            "tags": []
          },
          "execution_count": 82
        }
      ]
    },
    {
      "metadata": {
        "id": "A5f8bpo5gktc",
        "colab_type": "code",
        "colab": {}
      },
      "cell_type": "code",
      "source": [
        "from sklearn.preprocessing import StandardScaler\n",
        "\n",
        "scaler = StandardScaler()\n",
        "scaler.fit(X_train)\n",
        "\n",
        "X_train_s = scaler.transform(X_train)\n",
        "X_test_s = scaler.transform(X_test)"
      ],
      "execution_count": 0,
      "outputs": []
    },
    {
      "metadata": {
        "id": "w-kKdH7agkte",
        "colab_type": "code",
        "outputId": "de64fa97-d0d6-430e-8f6a-ef30b8c01a24",
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 119
        }
      },
      "cell_type": "code",
      "source": [
        "# スケーリング後のデータを使って学習\n",
        "model.fit(X_train_s, t_train)"
      ],
      "execution_count": 84,
      "outputs": [
        {
          "output_type": "execute_result",
          "data": {
            "text/plain": [
              "RandomForestRegressor(bootstrap=True, criterion='mse', max_depth=None,\n",
              "           max_features='auto', max_leaf_nodes=None,\n",
              "           min_impurity_decrease=0.0, min_impurity_split=None,\n",
              "           min_samples_leaf=1, min_samples_split=2,\n",
              "           min_weight_fraction_leaf=0.0, n_estimators=10, n_jobs=1,\n",
              "           oob_score=False, random_state=None, verbose=0, warm_start=False)"
            ]
          },
          "metadata": {
            "tags": []
          },
          "execution_count": 84
        }
      ]
    },
    {
      "metadata": {
        "id": "NDWI7sScgktf",
        "colab_type": "code",
        "outputId": "802bf6db-18cd-4c84-d548-45c147dc83b6",
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 34
        }
      },
      "cell_type": "code",
      "source": [
        "# 検証（訓練データ）\n",
        "model.score(X_train_s, t_train)"
      ],
      "execution_count": 85,
      "outputs": [
        {
          "output_type": "execute_result",
          "data": {
            "text/plain": [
              "0.9721252941946761"
            ]
          },
          "metadata": {
            "tags": []
          },
          "execution_count": 85
        }
      ]
    },
    {
      "metadata": {
        "id": "yKyHCNVHgktg",
        "colab_type": "code",
        "outputId": "35ddb760-8dfc-47cb-c985-7a4447dec2cc",
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 34
        }
      },
      "cell_type": "code",
      "source": [
        "# 検証（検証データ）\n",
        "model.score(X_test_s, t_test)"
      ],
      "execution_count": 86,
      "outputs": [
        {
          "output_type": "execute_result",
          "data": {
            "text/plain": [
              "0.8070758556594833"
            ]
          },
          "metadata": {
            "tags": []
          },
          "execution_count": 86
        }
      ]
    },
    {
      "metadata": {
        "id": "kU_CP_TTgkth",
        "colab_type": "text"
      },
      "cell_type": "markdown",
      "source": [
        "このように，スケーリングによる影響はほとんどないことが経験的にもわかる．\n",
        "また，Random Forest含めた決定木系の手法では，まずは条件分岐させる数である `max_depth` をハイパーパラメータとして調整することが多い．"
      ]
    },
    {
      "metadata": {
        "id": "Hiko5-Xygkth",
        "colab_type": "code",
        "colab": {}
      },
      "cell_type": "code",
      "source": [
        "from sklearn.model_selection import GridSearchCV"
      ],
      "execution_count": 0,
      "outputs": []
    },
    {
      "metadata": {
        "id": "AyKQHWbvgkti",
        "colab_type": "code",
        "colab": {}
      },
      "cell_type": "code",
      "source": [
        "# 調整を行うハイパーパラメータの値の候補\n",
        "param_grid = [\n",
        "    {'max_depth': [1, 2, 3, 4, 5, 6]}\n",
        "]"
      ],
      "execution_count": 0,
      "outputs": []
    },
    {
      "metadata": {
        "id": "STkqcBgBgktj",
        "colab_type": "code",
        "outputId": "044c7c7a-69ce-42f0-fab0-419c4c71ebdf",
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 204
        }
      },
      "cell_type": "code",
      "source": [
        "# 交差検証法を使用したハイパーパラメータの各組合せでの学習\n",
        "model_cv = GridSearchCV(RandomForestRegressor(), param_grid, cv=3, scoring='neg_mean_squared_error')\n",
        "model_cv.fit(X_train_s, t_train)"
      ],
      "execution_count": 89,
      "outputs": [
        {
          "output_type": "execute_result",
          "data": {
            "text/plain": [
              "GridSearchCV(cv=3, error_score='raise',\n",
              "       estimator=RandomForestRegressor(bootstrap=True, criterion='mse', max_depth=None,\n",
              "           max_features='auto', max_leaf_nodes=None,\n",
              "           min_impurity_decrease=0.0, min_impurity_split=None,\n",
              "           min_samples_leaf=1, min_samples_split=2,\n",
              "           min_weight_fraction_leaf=0.0, n_estimators=10, n_jobs=1,\n",
              "           oob_score=False, random_state=None, verbose=0, warm_start=False),\n",
              "       fit_params=None, iid=True, n_jobs=1,\n",
              "       param_grid=[{'max_depth': [1, 2, 3, 4, 5, 6]}],\n",
              "       pre_dispatch='2*n_jobs', refit=True, return_train_score='warn',\n",
              "       scoring='neg_mean_squared_error', verbose=0)"
            ]
          },
          "metadata": {
            "tags": []
          },
          "execution_count": 89
        }
      ]
    },
    {
      "metadata": {
        "id": "s6xix0lGgktl",
        "colab_type": "code",
        "outputId": "f2ab262f-2258-411b-dc4d-942247b50848",
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 173
        }
      },
      "cell_type": "code",
      "source": [
        "# 結果の確認 (valの対する結果)\n",
        "model_cv.grid_scores_"
      ],
      "execution_count": 90,
      "outputs": [
        {
          "output_type": "stream",
          "text": [
            "/usr/local/lib/python3.6/dist-packages/sklearn/model_selection/_search.py:762: DeprecationWarning: The grid_scores_ attribute was deprecated in version 0.18 in favor of the more elaborate cv_results_ attribute. The grid_scores_ attribute will not be available from 0.20\n",
            "  DeprecationWarning)\n"
          ],
          "name": "stderr"
        },
        {
          "output_type": "execute_result",
          "data": {
            "text/plain": [
              "[mean: -45.39943, std: 13.11535, params: {'max_depth': 1},\n",
              " mean: -24.64284, std: 7.10625, params: {'max_depth': 2},\n",
              " mean: -23.00834, std: 7.99062, params: {'max_depth': 3},\n",
              " mean: -19.58811, std: 5.74226, params: {'max_depth': 4},\n",
              " mean: -19.36648, std: 6.03968, params: {'max_depth': 5},\n",
              " mean: -16.72697, std: 6.46439, params: {'max_depth': 6}]"
            ]
          },
          "metadata": {
            "tags": []
          },
          "execution_count": 90
        }
      ]
    },
    {
      "metadata": {
        "id": "I069U8XLgktm",
        "colab_type": "code",
        "outputId": "273badf8-3102-4a7b-fac6-4d903ece171b",
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 34
        }
      },
      "cell_type": "code",
      "source": [
        "# 最も結果が良かったハイパーパラメータ\n",
        "model_cv.best_params_"
      ],
      "execution_count": 91,
      "outputs": [
        {
          "output_type": "execute_result",
          "data": {
            "text/plain": [
              "{'max_depth': 6}"
            ]
          },
          "metadata": {
            "tags": []
          },
          "execution_count": 91
        }
      ]
    },
    {
      "metadata": {
        "id": "5WgYlfQFgktn",
        "colab_type": "code",
        "colab": {}
      },
      "cell_type": "code",
      "source": [
        "# 最も結果が良かったハイパーパラメータの値を設定したモデル\n",
        "model = model_cv.best_estimator_"
      ],
      "execution_count": 0,
      "outputs": []
    },
    {
      "metadata": {
        "id": "6fK3yhN8gktp",
        "colab_type": "code",
        "outputId": "96467133-9995-417b-a7b8-6764ec71dc35",
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 34
        }
      },
      "cell_type": "code",
      "source": [
        "# 検証（検証データ）\n",
        "model.score(X_test_s, t_test)"
      ],
      "execution_count": 93,
      "outputs": [
        {
          "output_type": "execute_result",
          "data": {
            "text/plain": [
              "0.8210485221230714"
            ]
          },
          "metadata": {
            "tags": []
          },
          "execution_count": 93
        }
      ]
    },
    {
      "metadata": {
        "id": "ehq4jaHigktp",
        "colab_type": "text"
      },
      "cell_type": "markdown",
      "source": [
        "今回はもともとオーバーフィッティングしていなかったため，ハイパーパラメータの調整によって改善することはなかったが，もちろんオーバーフィッティングしているケースには有効な施策である．\n",
        "\n",
        "またランダムフォレストを含めた決定木系の手法の大きなメリットとして，各入力変数がどの程度重要であるかを定量評価した値が得られる．"
      ]
    },
    {
      "metadata": {
        "id": "rphb26j1gktr",
        "colab_type": "code",
        "outputId": "4bcf7827-6919-4811-a08b-f3d8e9ac7b99",
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 68
        }
      },
      "cell_type": "code",
      "source": [
        "# 各入力変数の重要度\n",
        "model.feature_importances_"
      ],
      "execution_count": 94,
      "outputs": [
        {
          "output_type": "execute_result",
          "data": {
            "text/plain": [
              "array([0.05015888, 0.00077746, 0.00376263, 0.00479107, 0.01185907,\n",
              "       0.47868764, 0.00844228, 0.03243677, 0.00319549, 0.0143976 ,\n",
              "       0.01143796, 0.00552612, 0.37452702])"
            ]
          },
          "metadata": {
            "tags": []
          },
          "execution_count": 94
        }
      ]
    },
    {
      "metadata": {
        "id": "xuxZSjmsgktt",
        "colab_type": "text"
      },
      "cell_type": "markdown",
      "source": [
        "重要度の総和が1になっており，この値を使って考察したり説明できるため，実務でよく見るポイントの一つである．"
      ]
    },
    {
      "metadata": {
        "id": "sRiv0IO2gktu",
        "colab_type": "text"
      },
      "cell_type": "markdown",
      "source": [
        "#### 分類 (Classification)"
      ]
    },
    {
      "metadata": {
        "id": "447ro4Tkgktu",
        "colab_type": "code",
        "colab": {}
      },
      "cell_type": "code",
      "source": [
        "# データの準備\n",
        "from sklearn.datasets import load_boston\n",
        "\n",
        "breast_cancer = load_breast_cancer()\n",
        "X = breast_cancer['data']\n",
        "t = breast_cancer['target']"
      ],
      "execution_count": 0,
      "outputs": []
    },
    {
      "metadata": {
        "id": "Ws6A8VXygktv",
        "colab_type": "code",
        "colab": {}
      },
      "cell_type": "code",
      "source": [
        "# 訓練と検証データの分割\n",
        "from sklearn.model_selection import train_test_split\n",
        "\n",
        "X_train, X_test, t_train, t_test = train_test_split(X, t, test_size=0.3, random_state=0)"
      ],
      "execution_count": 0,
      "outputs": []
    },
    {
      "metadata": {
        "id": "i-rlFCGogktw",
        "colab_type": "code",
        "outputId": "e2b9b9e6-221f-4ec8-d0d3-0c1dad0006b3",
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 136
        }
      },
      "cell_type": "code",
      "source": [
        "# モデルのインスタンス化，学習\n",
        "from sklearn.ensemble import RandomForestClassifier\n",
        "\n",
        "model = RandomForestClassifier()\n",
        "model.fit(X_train, t_train)"
      ],
      "execution_count": 97,
      "outputs": [
        {
          "output_type": "execute_result",
          "data": {
            "text/plain": [
              "RandomForestClassifier(bootstrap=True, class_weight=None, criterion='gini',\n",
              "            max_depth=None, max_features='auto', max_leaf_nodes=None,\n",
              "            min_impurity_decrease=0.0, min_impurity_split=None,\n",
              "            min_samples_leaf=1, min_samples_split=2,\n",
              "            min_weight_fraction_leaf=0.0, n_estimators=10, n_jobs=1,\n",
              "            oob_score=False, random_state=None, verbose=0,\n",
              "            warm_start=False)"
            ]
          },
          "metadata": {
            "tags": []
          },
          "execution_count": 97
        }
      ]
    },
    {
      "metadata": {
        "id": "UK7uuWI_gktx",
        "colab_type": "code",
        "outputId": "e387750f-7d15-4113-8fa7-eb3aa7b6d854",
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 34
        }
      },
      "cell_type": "code",
      "source": [
        "# 検証（訓練データ）\n",
        "model.score(X_train, t_train)"
      ],
      "execution_count": 98,
      "outputs": [
        {
          "output_type": "execute_result",
          "data": {
            "text/plain": [
              "1.0"
            ]
          },
          "metadata": {
            "tags": []
          },
          "execution_count": 98
        }
      ]
    },
    {
      "metadata": {
        "id": "YpJ3qFFWgkty",
        "colab_type": "code",
        "outputId": "9e0ef1a1-604e-479b-90ec-06d48a1c62d6",
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 34
        }
      },
      "cell_type": "code",
      "source": [
        "# 検証（検証データ）\n",
        "model.score(X_test, t_test)"
      ],
      "execution_count": 99,
      "outputs": [
        {
          "output_type": "execute_result",
          "data": {
            "text/plain": [
              "0.9649122807017544"
            ]
          },
          "metadata": {
            "tags": []
          },
          "execution_count": 99
        }
      ]
    },
    {
      "metadata": {
        "id": "5cPHXrrigktz",
        "colab_type": "code",
        "colab": {}
      },
      "cell_type": "code",
      "source": [
        "from sklearn.preprocessing import StandardScaler\n",
        "\n",
        "scaler = StandardScaler()\n",
        "scaler.fit(X_train)\n",
        "\n",
        "X_train_s = scaler.transform(X_train)\n",
        "X_test_s = scaler.transform(X_test)"
      ],
      "execution_count": 0,
      "outputs": []
    },
    {
      "metadata": {
        "id": "X5nv7qKtgkt1",
        "colab_type": "code",
        "outputId": "e3d1ff2b-e126-4e23-d0ba-58ce9245b591",
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 136
        }
      },
      "cell_type": "code",
      "source": [
        "# スケーリング後のデータを使って学習\n",
        "model.fit(X_train_s, t_train)"
      ],
      "execution_count": 101,
      "outputs": [
        {
          "output_type": "execute_result",
          "data": {
            "text/plain": [
              "RandomForestClassifier(bootstrap=True, class_weight=None, criterion='gini',\n",
              "            max_depth=None, max_features='auto', max_leaf_nodes=None,\n",
              "            min_impurity_decrease=0.0, min_impurity_split=None,\n",
              "            min_samples_leaf=1, min_samples_split=2,\n",
              "            min_weight_fraction_leaf=0.0, n_estimators=10, n_jobs=1,\n",
              "            oob_score=False, random_state=None, verbose=0,\n",
              "            warm_start=False)"
            ]
          },
          "metadata": {
            "tags": []
          },
          "execution_count": 101
        }
      ]
    },
    {
      "metadata": {
        "id": "kGtRyTS0gkt3",
        "colab_type": "code",
        "outputId": "2c370793-4461-406a-e70c-1161f552b1c6",
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 34
        }
      },
      "cell_type": "code",
      "source": [
        "# 検証（訓練データ）\n",
        "model.score(X_train_s, t_train)"
      ],
      "execution_count": 102,
      "outputs": [
        {
          "output_type": "execute_result",
          "data": {
            "text/plain": [
              "0.9974874371859297"
            ]
          },
          "metadata": {
            "tags": []
          },
          "execution_count": 102
        }
      ]
    },
    {
      "metadata": {
        "id": "632RRqX8gkt3",
        "colab_type": "code",
        "outputId": "63500f35-7f34-40a1-d974-96a37f414569",
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 34
        }
      },
      "cell_type": "code",
      "source": [
        "# 検証（検証データ）\n",
        "model.score(X_test_s, t_test)"
      ],
      "execution_count": 103,
      "outputs": [
        {
          "output_type": "execute_result",
          "data": {
            "text/plain": [
              "0.9473684210526315"
            ]
          },
          "metadata": {
            "tags": []
          },
          "execution_count": 103
        }
      ]
    },
    {
      "metadata": {
        "id": "uAA_3Ttqgkt6",
        "colab_type": "code",
        "colab": {}
      },
      "cell_type": "code",
      "source": [
        "from sklearn.model_selection import GridSearchCV"
      ],
      "execution_count": 0,
      "outputs": []
    },
    {
      "metadata": {
        "id": "ZNuZ_RjIgkt8",
        "colab_type": "code",
        "colab": {}
      },
      "cell_type": "code",
      "source": [
        "# 調整を行うハイパーパラメータの値の候補\n",
        "param_grid = [\n",
        "    {'max_depth': [1, 2, 3, 4, 5, 6]}\n",
        "]"
      ],
      "execution_count": 0,
      "outputs": []
    },
    {
      "metadata": {
        "id": "XYc8NE0Pgkt9",
        "colab_type": "code",
        "outputId": "3896dcc3-08e0-4ecb-b6b8-960243dff063",
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 221
        }
      },
      "cell_type": "code",
      "source": [
        "# 交差検証法を使用したハイパーパラメータの各組合せでの学習\n",
        "model_cv = GridSearchCV(RandomForestClassifier(), param_grid, cv=3)\n",
        "model_cv.fit(X_train_s, t_train)"
      ],
      "execution_count": 106,
      "outputs": [
        {
          "output_type": "execute_result",
          "data": {
            "text/plain": [
              "GridSearchCV(cv=3, error_score='raise',\n",
              "       estimator=RandomForestClassifier(bootstrap=True, class_weight=None, criterion='gini',\n",
              "            max_depth=None, max_features='auto', max_leaf_nodes=None,\n",
              "            min_impurity_decrease=0.0, min_impurity_split=None,\n",
              "            min_samples_leaf=1, min_samples_split=2,\n",
              "            min_weight_fraction_leaf=0.0, n_estimators=10, n_jobs=1,\n",
              "            oob_score=False, random_state=None, verbose=0,\n",
              "            warm_start=False),\n",
              "       fit_params=None, iid=True, n_jobs=1,\n",
              "       param_grid=[{'max_depth': [1, 2, 3, 4, 5, 6]}],\n",
              "       pre_dispatch='2*n_jobs', refit=True, return_train_score='warn',\n",
              "       scoring=None, verbose=0)"
            ]
          },
          "metadata": {
            "tags": []
          },
          "execution_count": 106
        }
      ]
    },
    {
      "metadata": {
        "id": "zm1nM83wgkt-",
        "colab_type": "code",
        "outputId": "781b5a96-4981-49f7-f9f9-6be59bd29f01",
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 173
        }
      },
      "cell_type": "code",
      "source": [
        "# 結果の確認 (valの対する結果)\n",
        "model_cv.grid_scores_"
      ],
      "execution_count": 107,
      "outputs": [
        {
          "output_type": "stream",
          "text": [
            "/usr/local/lib/python3.6/dist-packages/sklearn/model_selection/_search.py:762: DeprecationWarning: The grid_scores_ attribute was deprecated in version 0.18 in favor of the more elaborate cv_results_ attribute. The grid_scores_ attribute will not be available from 0.20\n",
            "  DeprecationWarning)\n"
          ],
          "name": "stderr"
        },
        {
          "output_type": "execute_result",
          "data": {
            "text/plain": [
              "[mean: 0.92965, std: 0.01575, params: {'max_depth': 1},\n",
              " mean: 0.95226, std: 0.01969, params: {'max_depth': 2},\n",
              " mean: 0.94221, std: 0.00700, params: {'max_depth': 3},\n",
              " mean: 0.94724, std: 0.02206, params: {'max_depth': 4},\n",
              " mean: 0.94724, std: 0.02810, params: {'max_depth': 5},\n",
              " mean: 0.94472, std: 0.01968, params: {'max_depth': 6}]"
            ]
          },
          "metadata": {
            "tags": []
          },
          "execution_count": 107
        }
      ]
    },
    {
      "metadata": {
        "id": "jGk7kSomgkuA",
        "colab_type": "code",
        "outputId": "01d2d922-2e71-460e-f970-63934581dc8e",
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 34
        }
      },
      "cell_type": "code",
      "source": [
        "# 最も結果が良かったハイパーパラメータ\n",
        "model_cv.best_params_"
      ],
      "execution_count": 108,
      "outputs": [
        {
          "output_type": "execute_result",
          "data": {
            "text/plain": [
              "{'max_depth': 2}"
            ]
          },
          "metadata": {
            "tags": []
          },
          "execution_count": 108
        }
      ]
    },
    {
      "metadata": {
        "id": "qK_dLuB9gkuB",
        "colab_type": "code",
        "colab": {}
      },
      "cell_type": "code",
      "source": [
        "# 最も結果が良かったハイパーパラメータの値を設定したモデル\n",
        "model = model_cv.best_estimator_"
      ],
      "execution_count": 0,
      "outputs": []
    },
    {
      "metadata": {
        "id": "jyF_emBggkuB",
        "colab_type": "code",
        "outputId": "423288f9-2084-4e46-8587-4b0d7257bfc8",
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 34
        }
      },
      "cell_type": "code",
      "source": [
        "# 検証（検証データ）\n",
        "model.score(X_test_s, t_test)"
      ],
      "execution_count": 110,
      "outputs": [
        {
          "output_type": "execute_result",
          "data": {
            "text/plain": [
              "0.9064327485380117"
            ]
          },
          "metadata": {
            "tags": []
          },
          "execution_count": 110
        }
      ]
    },
    {
      "metadata": {
        "id": "TP5zAp8ngkuC",
        "colab_type": "code",
        "outputId": "866555b4-1702-471a-dcfd-8e8b742c83d0",
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 119
        }
      },
      "cell_type": "code",
      "source": [
        "# 各入力変数の重要度\n",
        "model.feature_importances_"
      ],
      "execution_count": 111,
      "outputs": [
        {
          "output_type": "execute_result",
          "data": {
            "text/plain": [
              "array([0.        , 0.00132636, 0.15402681, 0.        , 0.        ,\n",
              "       0.        , 0.08069227, 0.        , 0.00862537, 0.        ,\n",
              "       0.06109958, 0.        , 0.        , 0.07705514, 0.        ,\n",
              "       0.00617919, 0.        , 0.        , 0.        , 0.        ,\n",
              "       0.00791324, 0.        , 0.20231586, 0.08683122, 0.        ,\n",
              "       0.02427364, 0.        , 0.25634921, 0.01406416, 0.01924793])"
            ]
          },
          "metadata": {
            "tags": []
          },
          "execution_count": 111
        }
      ]
    },
    {
      "metadata": {
        "id": "m_AxUXCegkuD",
        "colab_type": "text"
      },
      "cell_type": "markdown",
      "source": [
        "### ロジスティック回帰\n",
        "\n",
        "シンプルであるが良く使われる手法のひとつである．回帰という名前がついているが，問題設定としては分類に使用する点に注意されたい．"
      ]
    },
    {
      "metadata": {
        "id": "kl9D8pgxgkuE",
        "colab_type": "code",
        "colab": {}
      },
      "cell_type": "code",
      "source": [
        "# データの準備\n",
        "from sklearn.datasets import load_boston\n",
        "\n",
        "breast_cancer = load_breast_cancer()\n",
        "X = breast_cancer['data']\n",
        "t = breast_cancer['target']"
      ],
      "execution_count": 0,
      "outputs": []
    },
    {
      "metadata": {
        "id": "HmznRlxSgkuG",
        "colab_type": "code",
        "colab": {}
      },
      "cell_type": "code",
      "source": [
        "# 訓練と検証データの分割\n",
        "from sklearn.model_selection import train_test_split\n",
        "\n",
        "X_train, X_test, t_train, t_test = train_test_split(X, t, test_size=0.3, random_state=0)"
      ],
      "execution_count": 0,
      "outputs": []
    },
    {
      "metadata": {
        "id": "ttbKltgggkuG",
        "colab_type": "code",
        "outputId": "be27c084-5129-4991-86b5-44af122ea41b",
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 85
        }
      },
      "cell_type": "code",
      "source": [
        "# モデルのインスタンス化，学習\n",
        "from sklearn.linear_model import LogisticRegression\n",
        "\n",
        "model = LogisticRegression()\n",
        "model.fit(X_train, t_train)"
      ],
      "execution_count": 114,
      "outputs": [
        {
          "output_type": "execute_result",
          "data": {
            "text/plain": [
              "LogisticRegression(C=1.0, class_weight=None, dual=False, fit_intercept=True,\n",
              "          intercept_scaling=1, max_iter=100, multi_class='ovr', n_jobs=1,\n",
              "          penalty='l2', random_state=None, solver='liblinear', tol=0.0001,\n",
              "          verbose=0, warm_start=False)"
            ]
          },
          "metadata": {
            "tags": []
          },
          "execution_count": 114
        }
      ]
    },
    {
      "metadata": {
        "id": "SgF4m3wcgkuG",
        "colab_type": "code",
        "outputId": "565a0784-343e-4f61-9ee6-6a393abda66c",
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 34
        }
      },
      "cell_type": "code",
      "source": [
        "# 検証（訓練データ）\n",
        "model.score(X_train, t_train)"
      ],
      "execution_count": 115,
      "outputs": [
        {
          "output_type": "execute_result",
          "data": {
            "text/plain": [
              "0.957286432160804"
            ]
          },
          "metadata": {
            "tags": []
          },
          "execution_count": 115
        }
      ]
    },
    {
      "metadata": {
        "id": "68GS5x4wgkuH",
        "colab_type": "code",
        "outputId": "c28b28a5-b940-4aba-f7ef-f37ea25447ee",
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 34
        }
      },
      "cell_type": "code",
      "source": [
        "# 検証（検証データ）\n",
        "model.score(X_test, t_test)"
      ],
      "execution_count": 116,
      "outputs": [
        {
          "output_type": "execute_result",
          "data": {
            "text/plain": [
              "0.9649122807017544"
            ]
          },
          "metadata": {
            "tags": []
          },
          "execution_count": 116
        }
      ]
    },
    {
      "metadata": {
        "id": "wrqtC5_UgkuJ",
        "colab_type": "code",
        "colab": {}
      },
      "cell_type": "code",
      "source": [
        "from sklearn.preprocessing import StandardScaler\n",
        "\n",
        "scaler = StandardScaler()\n",
        "scaler.fit(X_train)\n",
        "\n",
        "X_train_s = scaler.transform(X_train)\n",
        "X_test_s = scaler.transform(X_test)"
      ],
      "execution_count": 0,
      "outputs": []
    },
    {
      "metadata": {
        "id": "PvAq2oGJgkuK",
        "colab_type": "code",
        "outputId": "1c62e6d7-4d4e-4c7e-f2fe-75b0ca9b8e0e",
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 85
        }
      },
      "cell_type": "code",
      "source": [
        "# スケーリング後のデータを使って学習\n",
        "model.fit(X_train_s, t_train)"
      ],
      "execution_count": 118,
      "outputs": [
        {
          "output_type": "execute_result",
          "data": {
            "text/plain": [
              "LogisticRegression(C=1.0, class_weight=None, dual=False, fit_intercept=True,\n",
              "          intercept_scaling=1, max_iter=100, multi_class='ovr', n_jobs=1,\n",
              "          penalty='l2', random_state=None, solver='liblinear', tol=0.0001,\n",
              "          verbose=0, warm_start=False)"
            ]
          },
          "metadata": {
            "tags": []
          },
          "execution_count": 118
        }
      ]
    },
    {
      "metadata": {
        "id": "immT3UaZgkuL",
        "colab_type": "code",
        "outputId": "8ba6991d-497d-4ed0-f816-537966efc92b",
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 34
        }
      },
      "cell_type": "code",
      "source": [
        "# 検証（訓練データ）\n",
        "model.score(X_train_s, t_train)"
      ],
      "execution_count": 119,
      "outputs": [
        {
          "output_type": "execute_result",
          "data": {
            "text/plain": [
              "0.9899497487437185"
            ]
          },
          "metadata": {
            "tags": []
          },
          "execution_count": 119
        }
      ]
    },
    {
      "metadata": {
        "id": "VMdXmzuHgkuL",
        "colab_type": "code",
        "outputId": "5ad09265-44dc-455a-fa45-291e1ffd314c",
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 34
        }
      },
      "cell_type": "code",
      "source": [
        "# 検証（検証データ）\n",
        "model.score(X_test_s, t_test)"
      ],
      "execution_count": 120,
      "outputs": [
        {
          "output_type": "execute_result",
          "data": {
            "text/plain": [
              "0.9766081871345029"
            ]
          },
          "metadata": {
            "tags": []
          },
          "execution_count": 120
        }
      ]
    },
    {
      "metadata": {
        "id": "9y2FDYI2gkuM",
        "colab_type": "code",
        "colab": {}
      },
      "cell_type": "code",
      "source": [
        "from sklearn.model_selection import GridSearchCV"
      ],
      "execution_count": 0,
      "outputs": []
    },
    {
      "metadata": {
        "id": "7zmuuX2LgkuO",
        "colab_type": "code",
        "colab": {}
      },
      "cell_type": "code",
      "source": [
        "# 調整を行うハイパーパラメータの値の候補\n",
        "param_grid = [\n",
        "    {'C': [0.01, 0.1, 1, 10]}\n",
        "]"
      ],
      "execution_count": 0,
      "outputs": []
    },
    {
      "metadata": {
        "id": "uV342dbbgkuO",
        "colab_type": "code",
        "outputId": "1947ffc2-5b71-400a-9e23-264f0b01bd7c",
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 153
        }
      },
      "cell_type": "code",
      "source": [
        "# 交差検証法を使用したハイパーパラメータの各組合せでの学習\n",
        "model_cv = GridSearchCV(LogisticRegression(), param_grid, cv=3)\n",
        "model_cv.fit(X_train_s, t_train)"
      ],
      "execution_count": 123,
      "outputs": [
        {
          "output_type": "execute_result",
          "data": {
            "text/plain": [
              "GridSearchCV(cv=3, error_score='raise',\n",
              "       estimator=LogisticRegression(C=1.0, class_weight=None, dual=False, fit_intercept=True,\n",
              "          intercept_scaling=1, max_iter=100, multi_class='ovr', n_jobs=1,\n",
              "          penalty='l2', random_state=None, solver='liblinear', tol=0.0001,\n",
              "          verbose=0, warm_start=False),\n",
              "       fit_params=None, iid=True, n_jobs=1,\n",
              "       param_grid=[{'C': [0.01, 0.1, 1, 10]}], pre_dispatch='2*n_jobs',\n",
              "       refit=True, return_train_score='warn', scoring=None, verbose=0)"
            ]
          },
          "metadata": {
            "tags": []
          },
          "execution_count": 123
        }
      ]
    },
    {
      "metadata": {
        "id": "L96Pjch7gkuP",
        "colab_type": "code",
        "outputId": "9cadcdc5-14d0-4248-90b3-c795f01541de",
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 139
        }
      },
      "cell_type": "code",
      "source": [
        "# 結果の確認 (valの対する結果)\n",
        "model_cv.grid_scores_"
      ],
      "execution_count": 124,
      "outputs": [
        {
          "output_type": "stream",
          "text": [
            "/usr/local/lib/python3.6/dist-packages/sklearn/model_selection/_search.py:762: DeprecationWarning: The grid_scores_ attribute was deprecated in version 0.18 in favor of the more elaborate cv_results_ attribute. The grid_scores_ attribute will not be available from 0.20\n",
            "  DeprecationWarning)\n"
          ],
          "name": "stderr"
        },
        {
          "output_type": "execute_result",
          "data": {
            "text/plain": [
              "[mean: 0.96985, std: 0.01223, params: {'C': 0.01},\n",
              " mean: 0.97990, std: 0.00935, params: {'C': 0.1},\n",
              " mean: 0.98492, std: 0.01624, params: {'C': 1},\n",
              " mean: 0.97236, std: 0.02323, params: {'C': 10}]"
            ]
          },
          "metadata": {
            "tags": []
          },
          "execution_count": 124
        }
      ]
    },
    {
      "metadata": {
        "id": "uQFjCpyRgkuQ",
        "colab_type": "code",
        "outputId": "2910c08e-6768-4ecb-a3ce-27de96d00bd9",
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 34
        }
      },
      "cell_type": "code",
      "source": [
        "# 最も結果が良かったハイパーパラメータ\n",
        "model_cv.best_params_"
      ],
      "execution_count": 125,
      "outputs": [
        {
          "output_type": "execute_result",
          "data": {
            "text/plain": [
              "{'C': 1}"
            ]
          },
          "metadata": {
            "tags": []
          },
          "execution_count": 125
        }
      ]
    },
    {
      "metadata": {
        "id": "StuVqTRLgkuS",
        "colab_type": "code",
        "colab": {}
      },
      "cell_type": "code",
      "source": [
        "# 最も結果が良かったハイパーパラメータの値を設定したモデル\n",
        "model = model_cv.best_estimator_"
      ],
      "execution_count": 0,
      "outputs": []
    },
    {
      "metadata": {
        "id": "3IKrRLM1gkuT",
        "colab_type": "code",
        "outputId": "03058073-0a44-4204-c070-3a02b2d69474",
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 34
        }
      },
      "cell_type": "code",
      "source": [
        "# 検証（検証データ）\n",
        "model.score(X_test_s, t_test)"
      ],
      "execution_count": 127,
      "outputs": [
        {
          "output_type": "execute_result",
          "data": {
            "text/plain": [
              "0.9766081871345029"
            ]
          },
          "metadata": {
            "tags": []
          },
          "execution_count": 127
        }
      ]
    },
    {
      "metadata": {
        "id": "srnknmRUgkuU",
        "colab_type": "text"
      },
      "cell_type": "markdown",
      "source": [
        "ロジスティック回帰の特徴は推論の時に出てくる．これまでの分類の手法であれば，新しいサンプルが得られた際の予測値は0か1かのカテゴリの値が得られる．Scikit-learnでは推論には`predict`を使用する．"
      ]
    },
    {
      "metadata": {
        "id": "rmW1_2hxgkuV",
        "colab_type": "code",
        "colab": {}
      },
      "cell_type": "code",
      "source": [
        "# 訓練データの一番最初のサンプルで試しに推論\n",
        "x_pred = [X_train_s[0]]\n",
        "y = model.predict(x_pred)"
      ],
      "execution_count": 0,
      "outputs": []
    },
    {
      "metadata": {
        "id": "brT-ZJUugkuV",
        "colab_type": "code",
        "outputId": "c5283f32-6101-44f0-cd93-1e41802ff5ff",
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 34
        }
      },
      "cell_type": "code",
      "source": [
        "print(y)"
      ],
      "execution_count": 129,
      "outputs": [
        {
          "output_type": "stream",
          "text": [
            "[1]\n"
          ],
          "name": "stdout"
        }
      ]
    },
    {
      "metadata": {
        "id": "LW72xh1ngkuW",
        "colab_type": "text"
      },
      "cell_type": "markdown",
      "source": [
        "この結果はどの手法でも同じであるが，ロジスティック回帰を含めた**識別モデル**系の手法では，各カテゴリに属する確率まで求めることができる．"
      ]
    },
    {
      "metadata": {
        "id": "wnD-FECZgkuX",
        "colab_type": "code",
        "colab": {}
      },
      "cell_type": "code",
      "source": [
        "y = model.predict_proba(x_pred)"
      ],
      "execution_count": 0,
      "outputs": []
    },
    {
      "metadata": {
        "id": "DrSJhzNagkuX",
        "colab_type": "code",
        "outputId": "50126743-95f5-461e-9067-6d41d83eee19",
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 34
        }
      },
      "cell_type": "code",
      "source": [
        "print(y)"
      ],
      "execution_count": 131,
      "outputs": [
        {
          "output_type": "stream",
          "text": [
            "[[0.00160119 0.99839881]]\n"
          ],
          "name": "stdout"
        }
      ]
    },
    {
      "metadata": {
        "id": "Rn6wYW0NgkuY",
        "colab_type": "text"
      },
      "cell_type": "markdown",
      "source": [
        "総和が1となっており，確率が大きいほうのカテゴリ1が選ばれたことがわかる．異常か異常でないかといった分類の場合，異常or異常でないだけでなく，どのくらい異常そうであるかの確率までわかることで，閾値を設けやすくなる．この特性は次の章で紹介するニューラルネットワークでも同じである．"
      ]
    },
    {
      "metadata": {
        "id": "jpmoPd7BgkuY",
        "colab_type": "text"
      },
      "cell_type": "markdown",
      "source": [
        "### k-means\n",
        "\n",
        "最後は教師なし学習である**クラスタリング**の手法として有名なk-meansを紹介する．分類では教師データとしてどのカテゴリに属しているかがわかっていたが，クラスタリングではその教師データがない状況で学習を行う．基本的には距離的に近いものをまとめる．\n",
        "\n",
        "例題では2つのクラスターをあらかじめ用意しておき，正しく分けられるかを確認する．"
      ]
    },
    {
      "metadata": {
        "id": "vP8uWZ7igkuZ",
        "colab_type": "code",
        "colab": {}
      },
      "cell_type": "code",
      "source": [
        "np.random.seed(0)"
      ],
      "execution_count": 0,
      "outputs": []
    },
    {
      "metadata": {
        "id": "pg2CNy70gkua",
        "colab_type": "code",
        "colab": {}
      },
      "cell_type": "code",
      "source": [
        "X1 = np.random.randn(50, 2) - 3\n",
        "X2 = np.random.randn(50, 2) + 3"
      ],
      "execution_count": 0,
      "outputs": []
    },
    {
      "metadata": {
        "id": "rUrCBsqPgkub",
        "colab_type": "code",
        "colab": {}
      },
      "cell_type": "code",
      "source": [
        "# 結合\n",
        "X = np.r_[X1, X2]"
      ],
      "execution_count": 0,
      "outputs": []
    },
    {
      "metadata": {
        "id": "OPqISC2Igkub",
        "colab_type": "code",
        "outputId": "10204d4f-cf50-4b15-9f2f-2055fd47044c",
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 34
        }
      },
      "cell_type": "code",
      "source": [
        "X.shape"
      ],
      "execution_count": 135,
      "outputs": [
        {
          "output_type": "execute_result",
          "data": {
            "text/plain": [
              "(100, 2)"
            ]
          },
          "metadata": {
            "tags": []
          },
          "execution_count": 135
        }
      ]
    },
    {
      "metadata": {
        "id": "yg1cH_c6gkuc",
        "colab_type": "code",
        "colab": {}
      },
      "cell_type": "code",
      "source": [
        "%matplotlib inline\n",
        "import matplotlib.pyplot as plt"
      ],
      "execution_count": 0,
      "outputs": []
    },
    {
      "metadata": {
        "id": "QZ_dv1J0gkud",
        "colab_type": "code",
        "outputId": "2bd7718e-3034-4141-a68b-6a0ddbcc7d34",
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 282
        }
      },
      "cell_type": "code",
      "source": [
        "plt.scatter(X[:, 0], X[:, 1])"
      ],
      "execution_count": 137,
      "outputs": [
        {
          "output_type": "execute_result",
          "data": {
            "text/plain": [
              "<matplotlib.collections.PathCollection at 0x7f7dbb9cbd30>"
            ]
          },
          "metadata": {
            "tags": []
          },
          "execution_count": 137
        },
        {
          "output_type": "display_data",
          "data": {
            "image/png": "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\nTkSuQmCC\n",
            "text/plain": [
              "<matplotlib.figure.Figure at 0x7f7dbba9def0>"
            ]
          },
          "metadata": {
            "tags": []
          }
        }
      ]
    },
    {
      "metadata": {
        "id": "kUS3sQPpgkud",
        "colab_type": "text"
      },
      "cell_type": "markdown",
      "source": [
        "それでは，k-meansを用いてクラスタリングを行う．クラスタリングでは基本的にはわけるクラスターの数がハイパーパラメータとして必要である．`n_clusters`で指定する．"
      ]
    },
    {
      "metadata": {
        "id": "aQ_pKjllgkud",
        "colab_type": "code",
        "colab": {}
      },
      "cell_type": "code",
      "source": [
        "from sklearn.cluster import KMeans"
      ],
      "execution_count": 0,
      "outputs": []
    },
    {
      "metadata": {
        "id": "jX_UrHmcgkue",
        "colab_type": "code",
        "outputId": "6c725864-8d1e-4186-f592-b917d6642e26",
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 68
        }
      },
      "cell_type": "code",
      "source": [
        "model = KMeans(n_clusters=2)\n",
        "model.fit(X)"
      ],
      "execution_count": 139,
      "outputs": [
        {
          "output_type": "execute_result",
          "data": {
            "text/plain": [
              "KMeans(algorithm='auto', copy_x=True, init='k-means++', max_iter=300,\n",
              "    n_clusters=2, n_init=10, n_jobs=1, precompute_distances='auto',\n",
              "    random_state=None, tol=0.0001, verbose=0)"
            ]
          },
          "metadata": {
            "tags": []
          },
          "execution_count": 139
        }
      ]
    },
    {
      "metadata": {
        "id": "9L3z8Vsugkue",
        "colab_type": "text"
      },
      "cell_type": "markdown",
      "source": [
        "予測した結果をもとにクラスタリングを行う．"
      ]
    },
    {
      "metadata": {
        "id": "qgXAIg8_gkug",
        "colab_type": "code",
        "colab": {}
      },
      "cell_type": "code",
      "source": [
        "y = model.predict(X)"
      ],
      "execution_count": 0,
      "outputs": []
    },
    {
      "metadata": {
        "id": "E_ct2qyigkug",
        "colab_type": "code",
        "outputId": "47922a31-0df3-4394-dc92-056e9d4432eb",
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 68
        }
      },
      "cell_type": "code",
      "source": [
        "print(y)"
      ],
      "execution_count": 141,
      "outputs": [
        {
          "output_type": "stream",
          "text": [
            "[0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0\n",
            " 0 0 0 0 0 0 0 0 0 0 0 0 0 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1\n",
            " 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1]\n"
          ],
          "name": "stdout"
        }
      ]
    },
    {
      "metadata": {
        "id": "ZdF-yKZrgkug",
        "colab_type": "text"
      },
      "cell_type": "markdown",
      "source": [
        "Numpyをうまく使うと，条件に当てはまるサンプルだけを抽出できる．"
      ]
    },
    {
      "metadata": {
        "id": "C0roV8dLgkug",
        "colab_type": "code",
        "colab": {}
      },
      "cell_type": "code",
      "source": [
        "X0 = X[y==0]\n",
        "X1 = X[y==1]"
      ],
      "execution_count": 0,
      "outputs": []
    },
    {
      "metadata": {
        "id": "dlq1lFyygkuh",
        "colab_type": "code",
        "outputId": "2034f35f-4c7e-4806-f5e5-b12938ca532f",
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 282
        }
      },
      "cell_type": "code",
      "source": [
        "plt.scatter(X0[:, 0], X0[:, 1], color='red')\n",
        "plt.scatter(X1[:, 0], X1[:,1 ], color='blue')"
      ],
      "execution_count": 143,
      "outputs": [
        {
          "output_type": "execute_result",
          "data": {
            "text/plain": [
              "<matplotlib.collections.PathCollection at 0x7f7dba09e208>"
            ]
          },
          "metadata": {
            "tags": []
          },
          "execution_count": 143
        },
        {
          "output_type": "display_data",
          "data": {
            "image/png": "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\n",
            "text/plain": [
              "<matplotlib.figure.Figure at 0x7f7dba2ea1d0>"
            ]
          },
          "metadata": {
            "tags": []
          }
        }
      ]
    }
  ]
}